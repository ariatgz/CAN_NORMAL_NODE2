
CAN_NORMAL_N2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a80  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004c80  08004c80  00005c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d94  08004d94  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d94  08004d94  00005d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d9c  08004d9c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004da0  08004da0  00005da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004da4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08004e0c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004e0c  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010500  00000000  00000000  00006096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f06  00000000  00000000  00016596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000184a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b08  00000000  00000000  000192c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f22  00000000  00000000  00019dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bf7  00000000  00000000  00043cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d7b  00000000  00000000  000548e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015965c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  001596a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015ddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08004c68 	.word	0x08004c68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08004c68 	.word	0x08004c68

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SysTick_Handler>:

extern UART_HandleTypeDef huart2;
extern CAN_HandleTypeDef hcan1;
extern TIM_HandleTypeDef htim6;

void SysTick_Handler(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

		HAL_IncTick();
 80005d4:	f000 fd22 	bl	800101c <HAL_IncTick>
		HAL_SYSTICK_IRQHandler();
 80005d8:	f001 fcba 	bl	8001f50 <HAL_SYSTICK_IRQHandler>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htim6);
 80005e4:	4802      	ldr	r0, [pc, #8]	@ (80005f0 <TIM6_DAC_IRQHandler+0x10>)
 80005e6:	f002 fb7f 	bl	8002ce8 <HAL_TIM_IRQHandler>

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000084 	.word	0x20000084

080005f4 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

	 HAL_CAN_IRQHandler(&hcan1);
 80005f8:	4802      	ldr	r0, [pc, #8]	@ (8000604 <CAN1_TX_IRQHandler+0x10>)
 80005fa:	f001 f973 	bl	80018e4 <HAL_CAN_IRQHandler>

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000158 	.word	0x20000158

08000608 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

	 HAL_CAN_IRQHandler(&hcan1);
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <CAN1_RX0_IRQHandler+0x10>)
 800060e:	f001 f969 	bl	80018e4 <HAL_CAN_IRQHandler>

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000158 	.word	0x20000158

0800061c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	 HAL_CAN_IRQHandler(&hcan1);
 8000620:	4802      	ldr	r0, [pc, #8]	@ (800062c <CAN1_RX1_IRQHandler+0x10>)
 8000622:	f001 f95f 	bl	80018e4 <HAL_CAN_IRQHandler>

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000158 	.word	0x20000158

08000630 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

	 HAL_CAN_IRQHandler(&hcan1);
 8000634:	4802      	ldr	r0, [pc, #8]	@ (8000640 <CAN1_SCE_IRQHandler+0x10>)
 8000636:	f001 f955 	bl	80018e4 <HAL_CAN_IRQHandler>

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000158 	.word	0x20000158

08000644 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0


	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000648:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800064c:	f001 fe54 	bl	80022f8 <HAL_GPIO_EXTI_IRQHandler>

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <main>:
uint32_t mailbox;
uint32_t FLatency=0;



int main(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0



	HAL_Init();
 8000658:	f000 fca3 	bl	8000fa2 <HAL_Init>
	srand(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f003 f95f 	bl	8003920 <srand>
	//clock config should be second always
	SystemClock_Config_HSE(SYS_CLK_FREQ_50_MHZ);
 8000662:	2032      	movs	r0, #50	@ 0x32
 8000664:	f000 f980 	bl	8000968 <SystemClock_Config_HSE>
	UART2_Init();
 8000668:	f000 fab2 	bl	8000bd0 <UART2_Init>
	CAN1_Init();
 800066c:	f000 fa7a 	bl	8000b64 <CAN1_Init>
	//TIMER6_Init();
	GPIO_Init();
 8000670:	f000 f886 	bl	8000780 <GPIO_Init>



	CAN_Filter_Config();
 8000674:	f000 fa50 	bl	8000b18 <CAN_Filter_Config>

	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY |CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF);
 8000678:	f240 4103 	movw	r1, #1027	@ 0x403
 800067c:	4806      	ldr	r0, [pc, #24]	@ (8000698 <main+0x44>)
 800067e:	f001 f90b 	bl	8001898 <HAL_CAN_ActivateNotification>

	if(HAL_CAN_Start(&hcan1) != HAL_OK){
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <main+0x44>)
 8000684:	f000 fed2 	bl	800142c <HAL_CAN_Start>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <main+0x40>
			Error_handler();
 800068e:	f000 fac5 	bl	8000c1c <Error_handler>
		}


	while(1);
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <main+0x40>
 8000698:	20000158 	.word	0x20000158

0800069c <HAL_TIM_PeriodElapsedCallback>:

	return 0;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

	//send LED_NUM
	//CAN_TransmitLED();


}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LED_Manager>:
void LED_Manager(uint8_t rcvd_msg){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]

	if(rcvd_msg == 1){
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d114      	bne.n	80006ea <LED_Manager+0x3a>

		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2102      	movs	r1, #2
 80006c4:	482d      	ldr	r0, [pc, #180]	@ (800077c <LED_Manager+0xcc>)
 80006c6:	f001 fdfd 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2104      	movs	r1, #4
 80006ce:	482b      	ldr	r0, [pc, #172]	@ (800077c <LED_Manager+0xcc>)
 80006d0:	f001 fdf8 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2108      	movs	r1, #8
 80006d8:	4828      	ldr	r0, [pc, #160]	@ (800077c <LED_Manager+0xcc>)
 80006da:	f001 fdf3 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	4826      	ldr	r0, [pc, #152]	@ (800077c <LED_Manager+0xcc>)
 80006e4:	f001 fdee 	bl	80022c4 <HAL_GPIO_WritePin>

	}



}
 80006e8:	e043      	b.n	8000772 <LED_Manager+0xc2>
	else if(rcvd_msg == 2){
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d114      	bne.n	800071a <LED_Manager+0x6a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2102      	movs	r1, #2
 80006f4:	4821      	ldr	r0, [pc, #132]	@ (800077c <LED_Manager+0xcc>)
 80006f6:	f001 fde5 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2104      	movs	r1, #4
 80006fe:	481f      	ldr	r0, [pc, #124]	@ (800077c <LED_Manager+0xcc>)
 8000700:	f001 fde0 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2108      	movs	r1, #8
 8000708:	481c      	ldr	r0, [pc, #112]	@ (800077c <LED_Manager+0xcc>)
 800070a:	f001 fddb 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	481a      	ldr	r0, [pc, #104]	@ (800077c <LED_Manager+0xcc>)
 8000714:	f001 fdd6 	bl	80022c4 <HAL_GPIO_WritePin>
}
 8000718:	e02b      	b.n	8000772 <LED_Manager+0xc2>
	else if(rcvd_msg == 3){
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d114      	bne.n	800074a <LED_Manager+0x9a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	4815      	ldr	r0, [pc, #84]	@ (800077c <LED_Manager+0xcc>)
 8000726:	f001 fdcd 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2104      	movs	r1, #4
 800072e:	4813      	ldr	r0, [pc, #76]	@ (800077c <LED_Manager+0xcc>)
 8000730:	f001 fdc8 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2108      	movs	r1, #8
 8000738:	4810      	ldr	r0, [pc, #64]	@ (800077c <LED_Manager+0xcc>)
 800073a:	f001 fdc3 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2110      	movs	r1, #16
 8000742:	480e      	ldr	r0, [pc, #56]	@ (800077c <LED_Manager+0xcc>)
 8000744:	f001 fdbe 	bl	80022c4 <HAL_GPIO_WritePin>
}
 8000748:	e013      	b.n	8000772 <LED_Manager+0xc2>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2102      	movs	r1, #2
 800074e:	480b      	ldr	r0, [pc, #44]	@ (800077c <LED_Manager+0xcc>)
 8000750:	f001 fdb8 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2104      	movs	r1, #4
 8000758:	4808      	ldr	r0, [pc, #32]	@ (800077c <LED_Manager+0xcc>)
 800075a:	f001 fdb3 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2108      	movs	r1, #8
 8000762:	4806      	ldr	r0, [pc, #24]	@ (800077c <LED_Manager+0xcc>)
 8000764:	f001 fdae 	bl	80022c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2110      	movs	r1, #16
 800076c:	4803      	ldr	r0, [pc, #12]	@ (800077c <LED_Manager+0xcc>)
 800076e:	f001 fda9 	bl	80022c4 <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021400 	.word	0x40021400

08000780 <GPIO_Init>:

void GPIO_Init(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	@ 0x30
 8000784:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a31      	ldr	r2, [pc, #196]	@ (8000850 <GPIO_Init+0xd0>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800079e:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000850 <GPIO_Init+0xd0>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_13;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	61fb      	str	r3, [r7, #28]
	ledgpio.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
	ledgpio.Mode = GPIO_MODE_IT_FALLING;
 80007c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &ledgpio);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4821      	ldr	r0, [pc, #132]	@ (8000854 <GPIO_Init+0xd4>)
 80007ce:	f001 fbcd 	bl	8001f6c <HAL_GPIO_Init>

	GPIO_InitTypeDef LEDsPins;
	LEDsPins.Pin = GPIO_PIN_1;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60bb      	str	r3, [r7, #8]
	LEDsPins.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
	LEDsPins.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &LEDsPins);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	481c      	ldr	r0, [pc, #112]	@ (8000858 <GPIO_Init+0xd8>)
 80007e6:	f001 fbc1 	bl	8001f6c <HAL_GPIO_Init>

	LEDsPins.Pin = GPIO_PIN_2;
 80007ea:	2304      	movs	r3, #4
 80007ec:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOF, &LEDsPins);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	4818      	ldr	r0, [pc, #96]	@ (8000858 <GPIO_Init+0xd8>)
 80007f6:	f001 fbb9 	bl	8001f6c <HAL_GPIO_Init>


	LEDsPins.Pin = GPIO_PIN_3;
 80007fa:	2308      	movs	r3, #8
 80007fc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOF, &LEDsPins);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	4814      	ldr	r0, [pc, #80]	@ (8000858 <GPIO_Init+0xd8>)
 8000806:	f001 fbb1 	bl	8001f6c <HAL_GPIO_Init>



	LEDsPins.Pin = GPIO_PIN_4;
 800080a:	2310      	movs	r3, #16
 800080c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOF, &LEDsPins);
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4619      	mov	r1, r3
 8000814:	4810      	ldr	r0, [pc, #64]	@ (8000858 <GPIO_Init+0xd8>)
 8000816:	f001 fba9 	bl	8001f6c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	480e      	ldr	r0, [pc, #56]	@ (8000858 <GPIO_Init+0xd8>)
 8000820:	f001 fd50 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2104      	movs	r1, #4
 8000828:	480b      	ldr	r0, [pc, #44]	@ (8000858 <GPIO_Init+0xd8>)
 800082a:	f001 fd4b 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	4809      	ldr	r0, [pc, #36]	@ (8000858 <GPIO_Init+0xd8>)
 8000834:	f001 fd46 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2110      	movs	r1, #16
 800083c:	4806      	ldr	r0, [pc, #24]	@ (8000858 <GPIO_Init+0xd8>)
 800083e:	f001 fd41 	bl	80022c4 <HAL_GPIO_WritePin>




	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000842:	2028      	movs	r0, #40	@ 0x28
 8000844:	f001 fb4d 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

}void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8000848:	bf00      	nop
 800084a:	3730      	adds	r7, #48	@ 0x30
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020800 	.word	0x40020800
 8000858:	40021400 	.word	0x40021400

0800085c <HAL_CAN_TxMailbox0CompleteCallback>:
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]



}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <Send_response>:

void Send_response(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef canh;


		char *our_msg = "Hi";
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <Send_response+0x3c>)
 8000878:	61fb      	str	r3, [r7, #28]

		canh.DLC = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	617b      	str	r3, [r7, #20]
		canh.StdId = 0x67a;
 800087e:	f240 637a 	movw	r3, #1658	@ 0x67a
 8000882:	607b      	str	r3, [r7, #4]
		canh.IDE = CAN_ID_STD;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
		canh.RTR = CAN_RTR_DATA;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
		if(HAL_CAN_AddTxMessage(&hcan1, &canh, our_msg, &mailbox)!= HAL_OK){
 800088c:	1d39      	adds	r1, r7, #4
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <Send_response+0x40>)
 8000890:	69fa      	ldr	r2, [r7, #28]
 8000892:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <Send_response+0x44>)
 8000894:	f000 fe0e 	bl	80014b4 <HAL_CAN_AddTxMessage>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <Send_response+0x32>
			Error_handler();
 800089e:	f000 f9bd 	bl	8000c1c <Error_handler>
		}



}
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08004c80 	.word	0x08004c80
 80008b0:	20000180 	.word	0x20000180
 80008b4:	20000158 	.word	0x20000158

080008b8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]



}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]


}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b098      	sub	sp, #96	@ 0x60
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

			uint8_t rcvd_msg[8];
			char msg[50];


			if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRx, rcvd_msg) != HAL_OK){
 80008e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008ec:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80008f0:	2100      	movs	r1, #0
 80008f2:	4816      	ldr	r0, [pc, #88]	@ (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80008f4:	f000 feae 	bl	8001654 <HAL_CAN_GetRxMessage>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
				Error_handler();
 80008fe:	f000 f98d 	bl	8000c1c <Error_handler>
			}


			if(canRx.StdId == 0x65D && canRx.RTR == 0){
 8000902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000904:	f240 625d 	movw	r2, #1629	@ 0x65d
 8000908:	4293      	cmp	r3, r2
 800090a:	d111      	bne.n	8000930 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 800090c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10e      	bne.n	8000930 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>

				//This is a data frame
				LED_Manager(rcvd_msg[0]);
 8000912:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff feca 	bl	80006b0 <LED_Manager>
				sprintf(msg, "Message received: #%x\r\n",rcvd_msg[0]);
 800091c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000920:	461a      	mov	r2, r3
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	490a      	ldr	r1, [pc, #40]	@ (8000950 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000928:	4618      	mov	r0, r3
 800092a:	f003 f8e9 	bl	8003b00 <siprintf>
 800092e:	e009      	b.n	8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>


			}
			else if(canRx.StdId == 0x65D && canRx.RTR == 1){
 8000930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000932:	f240 625d 	movw	r2, #1629	@ 0x65d
 8000936:	4293      	cmp	r3, r2
 8000938:	d104      	bne.n	8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
 800093a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800093c:	2b01      	cmp	r3, #1
 800093e:	d101      	bne.n	8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
				//A remote Frame
				Send_response();
 8000940:	f7ff ff96 	bl	8000870 <Send_response>





}
 8000944:	3760      	adds	r7, #96	@ 0x60
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000158 	.word	0x20000158
 8000950:	08004c84 	.word	0x08004c84

08000954 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]




}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SystemClock_Config_HSE>:


}
}

void SystemClock_Config_HSE(uint8_t clkFreq){
 8000968:	b580      	push	{r7, lr}
 800096a:	b096      	sub	sp, #88	@ 0x58
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000972:	2301      	movs	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
	osc_init.HSEState = RCC_HSE_BYPASS;
 8000976:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000980:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000984:	643b      	str	r3, [r7, #64]	@ 0x40

	switch(clkFreq)
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2bb4      	cmp	r3, #180	@ 0xb4
 800098a:	d00c      	beq.n	80009a6 <SystemClock_Config_HSE+0x3e>
 800098c:	2bb4      	cmp	r3, #180	@ 0xb4
 800098e:	f300 80b6 	bgt.w	8000afe <SystemClock_Config_HSE+0x196>
 8000992:	2b78      	cmp	r3, #120	@ 0x78
 8000994:	d074      	beq.n	8000a80 <SystemClock_Config_HSE+0x118>
 8000996:	2b78      	cmp	r3, #120	@ 0x78
 8000998:	f300 80b1 	bgt.w	8000afe <SystemClock_Config_HSE+0x196>
 800099c:	2b32      	cmp	r3, #50	@ 0x32
 800099e:	d03b      	beq.n	8000a18 <SystemClock_Config_HSE+0xb0>
 80009a0:	2b54      	cmp	r3, #84	@ 0x54
 80009a2:	d053      	beq.n	8000a4c <SystemClock_Config_HSE+0xe4>
		FLatency = FLASH_ACR_LATENCY_3WS;
				break;

	}
	default:
		return;
 80009a4:	e0ab      	b.n	8000afe <SystemClock_Config_HSE+0x196>
				__HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b58      	ldr	r3, [pc, #352]	@ (8000b08 <SystemClock_Config_HSE+0x1a0>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a57      	ldr	r2, [pc, #348]	@ (8000b08 <SystemClock_Config_HSE+0x1a0>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b55      	ldr	r3, [pc, #340]	@ (8000b08 <SystemClock_Config_HSE+0x1a0>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009be:	4b53      	ldr	r3, [pc, #332]	@ (8000b0c <SystemClock_Config_HSE+0x1a4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a52      	ldr	r2, [pc, #328]	@ (8000b0c <SystemClock_Config_HSE+0x1a4>)
 80009c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	4b50      	ldr	r3, [pc, #320]	@ (8000b0c <SystemClock_Config_HSE+0x1a4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
				__HAL_PWR_OVERDRIVE_ENABLE();
 80009d6:	4b4d      	ldr	r3, [pc, #308]	@ (8000b0c <SystemClock_Config_HSE+0x1a4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a4c      	ldr	r2, [pc, #304]	@ (8000b0c <SystemClock_Config_HSE+0x1a4>)
 80009dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009e0:	6013      	str	r3, [r2, #0]
		        osc_init.PLL.PLLM = 8;
 80009e2:	2308      	movs	r3, #8
 80009e4:	647b      	str	r3, [r7, #68]	@ 0x44
				osc_init.PLL.PLLP = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
				osc_init.PLL.PLLN = 360;
 80009ea:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80009ee:	64bb      	str	r3, [r7, #72]	@ 0x48
				osc_init.PLL.PLLQ = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	653b      	str	r3, [r7, #80]	@ 0x50
				osc_init.PLL.PLLR = 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	657b      	str	r3, [r7, #84]	@ 0x54
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80009f8:	230f      	movs	r3, #15
 80009fa:	613b      	str	r3, [r7, #16]
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;// look at the clock tree for more detail
 80009fc:	2302      	movs	r3, #2
 80009fe:	617b      	str	r3, [r7, #20]
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
				clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a08:	61fb      	str	r3, [r7, #28]
				clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0e:	623b      	str	r3, [r7, #32]
				FLatency = FLASH_ACR_LATENCY_5WS;
 8000a10:	4b3f      	ldr	r3, [pc, #252]	@ (8000b10 <SystemClock_Config_HSE+0x1a8>)
 8000a12:	2205      	movs	r2, #5
 8000a14:	601a      	str	r2, [r3, #0]
		break;
 8000a16:	e04d      	b.n	8000ab4 <SystemClock_Config_HSE+0x14c>
		osc_init.PLL.PLLM = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLN = 100;
 8000a20:	2364      	movs	r3, #100	@ 0x64
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 7;
 8000a24:	2307      	movs	r3, #7
 8000a26:	653b      	str	r3, [r7, #80]	@ 0x50
		osc_init.PLL.PLLR = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	657b      	str	r3, [r7, #84]	@ 0x54
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	613b      	str	r3, [r7, #16]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;// look at the clock tree for more detail
 8000a30:	2302      	movs	r3, #2
 8000a32:	617b      	str	r3, [r7, #20]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	61bb      	str	r3, [r7, #24]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3c:	61fb      	str	r3, [r7, #28]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a42:	623b      	str	r3, [r7, #32]
		FLatency = FLASH_ACR_LATENCY_1WS;
 8000a44:	4b32      	ldr	r3, [pc, #200]	@ (8000b10 <SystemClock_Config_HSE+0x1a8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
		break;
 8000a4a:	e033      	b.n	8000ab4 <SystemClock_Config_HSE+0x14c>
				osc_init.PLL.PLLM = 8;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	647b      	str	r3, [r7, #68]	@ 0x44
				osc_init.PLL.PLLP = 2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
				osc_init.PLL.PLLN = 168;
 8000a54:	23a8      	movs	r3, #168	@ 0xa8
 8000a56:	64bb      	str	r3, [r7, #72]	@ 0x48
				osc_init.PLL.PLLQ = 7;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	653b      	str	r3, [r7, #80]	@ 0x50
				osc_init.PLL.PLLR = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	657b      	str	r3, [r7, #84]	@ 0x54
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a60:	230f      	movs	r3, #15
 8000a62:	613b      	str	r3, [r7, #16]
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;// look at the clock tree for more detail
 8000a64:	2302      	movs	r3, #2
 8000a66:	617b      	str	r3, [r7, #20]
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	61bb      	str	r3, [r7, #24]
				clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	61fb      	str	r3, [r7, #28]
				clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a76:	623b      	str	r3, [r7, #32]
				FLatency = FLASH_ACR_LATENCY_2WS;
 8000a78:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <SystemClock_Config_HSE+0x1a8>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	601a      	str	r2, [r3, #0]
				break;
 8000a7e:	e019      	b.n	8000ab4 <SystemClock_Config_HSE+0x14c>
		osc_init.PLL.PLLM = 8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	647b      	str	r3, [r7, #68]	@ 0x44
		osc_init.PLL.PLLP = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
		osc_init.PLL.PLLN = 240;
 8000a88:	23f0      	movs	r3, #240	@ 0xf0
 8000a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
		osc_init.PLL.PLLQ = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	653b      	str	r3, [r7, #80]	@ 0x50
		osc_init.PLL.PLLR = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	657b      	str	r3, [r7, #84]	@ 0x54
		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a94:	230f      	movs	r3, #15
 8000a96:	613b      	str	r3, [r7, #16]
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;// look at the clock tree for more detail
 8000a98:	2302      	movs	r3, #2
 8000a9a:	617b      	str	r3, [r7, #20]
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
		clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aa4:	61fb      	str	r3, [r7, #28]
		clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aaa:	623b      	str	r3, [r7, #32]
		FLatency = FLASH_ACR_LATENCY_3WS;
 8000aac:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <SystemClock_Config_HSE+0x1a8>)
 8000aae:	2203      	movs	r2, #3
 8000ab0:	601a      	str	r2, [r3, #0]
				break;
 8000ab2:	bf00      	nop

	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fc41 	bl	8002340 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config_HSE+0x160>

		Error_handler();
 8000ac4:	f000 f8aa 	bl	8000c1c <Error_handler>
	}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency)!= HAL_OK){
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <SystemClock_Config_HSE+0x1a8>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fee2 	bl	800289c <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config_HSE+0x17a>
		Error_handler();
 8000ade:	f000 f89d 	bl	8000c1c <Error_handler>
	}

	//SYSTICK config
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ae2:	f002 f8cd 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <SystemClock_Config_HSE+0x1ac>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	099b      	lsrs	r3, r3, #6
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fa04 	bl	8001efe <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000af6:	2004      	movs	r0, #4
 8000af8:	f001 fa0e 	bl	8001f18 <HAL_SYSTICK_CLKSourceConfig>
 8000afc:	e000      	b.n	8000b00 <SystemClock_Config_HSE+0x198>
		return;
 8000afe:	bf00      	nop


}
 8000b00:	3758      	adds	r7, #88	@ 0x58
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000
 8000b10:	20000184 	.word	0x20000184
 8000b14:	10624dd3 	.word	0x10624dd3

08000b18 <CAN_Filter_Config>:

void CAN_Filter_Config(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef can_filter;

	can_filter.FilterActivation = ENABLE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
	can_filter.FilterBank = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
	can_filter.FilterIdHigh = 0x0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]

	if ( HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK){
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <CAN_Filter_Config+0x48>)
 8000b48:	f000 fb84 	bl	8001254 <HAL_CAN_ConfigFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <CAN_Filter_Config+0x3e>
		Error_handler();
 8000b52:	f000 f863 	bl	8000c1c <Error_handler>
	}

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000158 	.word	0x20000158

08000b64 <CAN1_Init>:
void CAN1_Init(void){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 8000b68:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b6a:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <CAN1_Init+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
	hcan1.Init.AutoBusOff =  DISABLE;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	765a      	strb	r2, [r3, #25]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	775a      	strb	r2, [r3, #29]

	 hcan1.Init.Prescaler = 5;
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <CAN1_Init+0x64>)
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	605a      	str	r2, [r3, #4]
	 hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <CAN1_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
	 hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <CAN1_Init+0x64>)
 8000ba6:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000baa:	611a      	str	r2, [r3, #16]
	    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <CAN1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hcan1)!= HAL_OK){
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <CAN1_Init+0x64>)
 8000bb4:	f000 fa52 	bl	800105c <HAL_CAN_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <CAN1_Init+0x5e>
		Error_handler();
 8000bbe:	f000 f82d 	bl	8000c1c <Error_handler>
	}




}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000158 	.word	0x20000158
 8000bcc:	40006400 	.word	0x40006400

08000bd0 <UART2_Init>:

void UART2_Init(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

	huart2.Instance = USART3;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <UART2_Init+0x44>)
 8000bd6:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <UART2_Init+0x48>)
 8000bd8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <UART2_Init+0x44>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength =  UART_WORDLENGTH_8B;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <UART2_Init+0x44>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <UART2_Init+0x44>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <UART2_Init+0x44>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <UART2_Init+0x44>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <UART2_Init+0x44>)
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2)!= HAL_OK ){
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <UART2_Init+0x44>)
 8000c02:	f002 f9be 	bl	8002f82 <HAL_UART_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <UART2_Init+0x40>

		Error_handler();
 8000c0c:	f000 f806 	bl	8000c1c <Error_handler>
	}
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000d0 	.word	0x200000d0
 8000c18:	40004800 	.word	0x40004800

08000c1c <Error_handler>:

void Error_handler(void){
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <HAL_MspInit>:
#include "main.h"


void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  //low level inits.
	// set up the priority grouping of the arm cortex mx

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f001 f92f 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

	// enable the required system exceptions of the arm

	SCB->SHCSR  |= 0x7 <<16; // usg fault, memory fault enabled
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <HAL_MspInit+0x40>)
 8000c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <HAL_MspInit+0x40>)
 8000c3c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000c40:	6253      	str	r3, [r2, #36]	@ 0x24

	// set up the priority for exceptions
	HAL_NVIC_SetPriority( MemoryManagement_IRQn,0,0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	f06f 000b 	mvn.w	r0, #11
 8000c4a:	f001 f92e 	bl	8001eaa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( BusFault_IRQn,0,0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	f06f 000a 	mvn.w	r0, #10
 8000c56:	f001 f928 	bl	8001eaa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( UsageFault_IRQn,0,0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f06f 0009 	mvn.w	r0, #9
 8000c62:	f001 f922 	bl	8001eaa <HAL_NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;

	//low level inints
	// enable the clock
	__HAL_RCC_USART2_CLK_ENABLE();
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <HAL_UART_MspInit+0x80>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf0 <HAL_UART_MspInit+0x80>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <HAL_UART_MspInit+0x80>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <HAL_UART_MspInit+0x80>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c94:	4a16      	ldr	r2, [pc, #88]	@ (8000cf0 <HAL_UART_MspInit+0x80>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <HAL_UART_MspInit+0x80>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
	//pin muxing config
		gpio_uart.Pin = GPIO_PIN_2;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
		gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
		gpio_uart.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
		gpio_uart.Alternate = GPIO_AF7_USART2; //UART_Tx
 8000cb8:	2307      	movs	r3, #7
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <HAL_UART_MspInit+0x84>)
 8000cc4:	f001 f952 	bl	8001f6c <HAL_GPIO_Init>

		gpio_uart.Pin = GPIO_PIN_3;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <HAL_UART_MspInit+0x84>)
 8000cd4:	f001 f94a 	bl	8001f6c <HAL_GPIO_Init>

	// enable IRQ and set the priority (NVIC Settings)
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cd8:	2026      	movs	r0, #38	@ 0x26
 8000cda:	f001 f902 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	2026      	movs	r0, #38	@ 0x26
 8000ce4:	f001 f8e1 	bl	8001eaa <HAL_NVIC_SetPriority>

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	@ 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_CAN_MspInit>:
	//set priority of IRQ
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);

}
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef canGpio;

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <HAL_CAN_MspInit+0xa0>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	4a24      	ldr	r2, [pc, #144]	@ (8000d98 <HAL_CAN_MspInit+0xa0>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <HAL_CAN_MspInit+0xa0>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_CAN_MspInit+0xa0>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000d98 <HAL_CAN_MspInit+0xa0>)
 8000d1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d24:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <HAL_CAN_MspInit+0xa0>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]

	canGpio.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000d30:	2303      	movs	r3, #3
 8000d32:	617b      	str	r3, [r7, #20]
	canGpio.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
	canGpio.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
	canGpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
	canGpio.Alternate = GPIO_AF9_CAN1; //CAN
 8000d40:	2309      	movs	r3, #9
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &canGpio);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <HAL_CAN_MspInit+0xa4>)
 8000d4c:	f001 f90e 	bl	8001f6c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	210f      	movs	r1, #15
 8000d54:	2013      	movs	r0, #19
 8000d56:	f001 f8a8 	bl	8001eaa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	2014      	movs	r0, #20
 8000d60:	f001 f8a3 	bl	8001eaa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	210f      	movs	r1, #15
 8000d68:	2015      	movs	r0, #21
 8000d6a:	f001 f89e 	bl	8001eaa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	210f      	movs	r1, #15
 8000d72:	2016      	movs	r0, #22
 8000d74:	f001 f899 	bl	8001eaa <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d78:	2013      	movs	r0, #19
 8000d7a:	f001 f8b2 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d7e:	2014      	movs	r0, #20
 8000d80:	f001 f8af 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d84:	2015      	movs	r0, #21
 8000d86:	f001 f8ac 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000d8a:	2016      	movs	r0, #22
 8000d8c:	f001 f8a9 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	@ 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020c00 	.word	0x40020c00

08000da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return 1;
 8000da4:	2301      	movs	r3, #1
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_kill>:

int _kill(int pid, int sig)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dba:	f002 ff53 	bl	8003c64 <__errno>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2216      	movs	r2, #22
 8000dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_exit>:

void _exit (int status)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffe7 	bl	8000db0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000de2:	bf00      	nop
 8000de4:	e7fd      	b.n	8000de2 <_exit+0x12>

08000de6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e00a      	b.n	8000e0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df8:	f3af 8000 	nop.w
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	60ba      	str	r2, [r7, #8]
 8000e04:	b2ca      	uxtb	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbf0      	blt.n	8000df8 <_read+0x12>
  }

  return len;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	e009      	b.n	8000e46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbf1      	blt.n	8000e32 <_write+0x12>
  }
  return len;
 8000e4e:	687b      	ldr	r3, [r7, #4]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_close>:

int _close(int file)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e80:	605a      	str	r2, [r3, #4]
  return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_isatty>:

int _isatty(int file)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f002 feb8 	bl	8003c64 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20080000 	.word	0x20080000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000188 	.word	0x20000188
 8000f28:	200002e0 	.word	0x200002e0

08000f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f54:	f7ff ffea 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f58:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f5a:	490d      	ldr	r1, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f70:	4c0a      	ldr	r4, [pc, #40]	@ (8000f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f002 fe77 	bl	8003c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fb67 	bl	8000654 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f94:	08004da4 	.word	0x08004da4
  ldr r2, =_sbss
 8000f98:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f9c:	200002dc 	.word	0x200002dc

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>

08000fa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 ff74 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 f805 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb2:	f7ff fe3b 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 ff8f 	bl	8001efe <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 ff57 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	2000018c 	.word	0x2000018c

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000018c 	.word	0x2000018c

0800105c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0ed      	b.n	800124a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fe3c 	bl	8000cf8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001090:	f7ff ffd8 	bl	8001044 <HAL_GetTick>
 8001094:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001096:	e012      	b.n	80010be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001098:	f7ff ffd4 	bl	8001044 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b0a      	cmp	r3, #10
 80010a4:	d90b      	bls.n	80010be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2205      	movs	r2, #5
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0c5      	b.n	800124a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0e5      	beq.n	8001098 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0202 	bic.w	r2, r2, #2
 80010da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010dc:	f7ff ffb2 	bl	8001044 <HAL_GetTick>
 80010e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010e2:	e012      	b.n	800110a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e4:	f7ff ffae 	bl	8001044 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b0a      	cmp	r3, #10
 80010f0:	d90b      	bls.n	800110a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2205      	movs	r2, #5
 8001102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e09f      	b.n	800124a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e5      	bne.n	80010e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7e1b      	ldrb	r3, [r3, #24]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d108      	bne.n	8001132 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e007      	b.n	8001142 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7e5b      	ldrb	r3, [r3, #25]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d108      	bne.n	800115c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e007      	b.n	800116c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800116a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e9b      	ldrb	r3, [r3, #26]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d108      	bne.n	8001186 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e007      	b.n	8001196 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0220 	bic.w	r2, r2, #32
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7edb      	ldrb	r3, [r3, #27]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d108      	bne.n	80011b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0210 	bic.w	r2, r2, #16
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e007      	b.n	80011c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7f1b      	ldrb	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d108      	bne.n	80011da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0208 	orr.w	r2, r2, #8
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e007      	b.n	80011ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0208 	bic.w	r2, r2, #8
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7f5b      	ldrb	r3, [r3, #29]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d108      	bne.n	8001204 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0204 	orr.w	r2, r2, #4
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e007      	b.n	8001214 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	ea42 0103 	orr.w	r1, r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800126c:	7cfb      	ldrb	r3, [r7, #19]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d003      	beq.n	800127a <HAL_CAN_ConfigFilter+0x26>
 8001272:	7cfb      	ldrb	r3, [r7, #19]
 8001274:	2b02      	cmp	r3, #2
 8001276:	f040 80c7 	bne.w	8001408 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a69      	ldr	r2, [pc, #420]	@ (8001424 <HAL_CAN_ConfigFilter+0x1d0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d001      	beq.n	8001288 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001284:	4b68      	ldr	r3, [pc, #416]	@ (8001428 <HAL_CAN_ConfigFilter+0x1d4>)
 8001286:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800128e:	f043 0201 	orr.w	r2, r3, #1
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	4a63      	ldr	r2, [pc, #396]	@ (8001428 <HAL_CAN_ConfigFilter+0x1d4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d111      	bne.n	80012c4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012a6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	431a      	orrs	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	2201      	movs	r2, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d123      	bne.n	8001336 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001310:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3248      	adds	r2, #72	@ 0x48
 8001316:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800132c:	6979      	ldr	r1, [r7, #20]
 800132e:	3348      	adds	r3, #72	@ 0x48
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d122      	bne.n	8001384 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	431a      	orrs	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800135e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3248      	adds	r2, #72	@ 0x48
 8001364:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001378:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800137a:	6979      	ldr	r1, [r7, #20]
 800137c:	3348      	adds	r3, #72	@ 0x48
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800139e:	e007      	b.n	80013b0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d109      	bne.n	80013cc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013ca:	e007      	b.n	80013dc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d107      	bne.n	80013f4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013fa:	f023 0201 	bic.w	r2, r3, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	e006      	b.n	8001416 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
  }
}
 8001416:	4618      	mov	r0, r3
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40003400 	.word	0x40003400
 8001428:	40006400 	.word	0x40006400

0800142c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d12e      	bne.n	800149e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001458:	f7ff fdf4 	bl	8001044 <HAL_GetTick>
 800145c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800145e:	e012      	b.n	8001486 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001460:	f7ff fdf0 	bl	8001044 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b0a      	cmp	r3, #10
 800146c:	d90b      	bls.n	8001486 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2205      	movs	r2, #5
 800147e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e012      	b.n	80014ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1e5      	bne.n	8001460 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e006      	b.n	80014ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
  }
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d003      	beq.n	80014e0 <HAL_CAN_AddTxMessage+0x2c>
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	f040 80ad 	bne.w	800163a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10a      	bne.n	8001500 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8095 	beq.w	800162a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	0e1b      	lsrs	r3, r3, #24
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800150a:	2201      	movs	r2, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10d      	bne.n	8001538 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001526:	68f9      	ldr	r1, [r7, #12]
 8001528:	6809      	ldr	r1, [r1, #0]
 800152a:	431a      	orrs	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3318      	adds	r3, #24
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	440b      	add	r3, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e00f      	b.n	8001558 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001542:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800154c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3318      	adds	r3, #24
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	440b      	add	r3, r1
 8001556:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6819      	ldr	r1, [r3, #0]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3318      	adds	r3, #24
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	440b      	add	r3, r1
 8001568:	3304      	adds	r3, #4
 800156a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	7d1b      	ldrb	r3, [r3, #20]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d111      	bne.n	8001598 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3318      	adds	r3, #24
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	3304      	adds	r3, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	6811      	ldr	r1, [r2, #0]
 8001588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3318      	adds	r3, #24
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	440b      	add	r3, r1
 8001594:	3304      	adds	r3, #4
 8001596:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3307      	adds	r3, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	061a      	lsls	r2, r3, #24
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3306      	adds	r3, #6
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3305      	adds	r3, #5
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	4313      	orrs	r3, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	3204      	adds	r2, #4
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	4610      	mov	r0, r2
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	6811      	ldr	r1, [r2, #0]
 80015c0:	ea43 0200 	orr.w	r2, r3, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	440b      	add	r3, r1
 80015ca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80015ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3303      	adds	r3, #3
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	061a      	lsls	r2, r3, #24
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3302      	adds	r3, #2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3301      	adds	r3, #1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	4313      	orrs	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	4610      	mov	r0, r2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	6811      	ldr	r1, [r2, #0]
 80015f6:	ea43 0200 	orr.w	r2, r3, r0
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	440b      	add	r3, r1
 8001600:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001604:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3318      	adds	r3, #24
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	6811      	ldr	r1, [r2, #0]
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3318      	adds	r3, #24
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	440b      	add	r3, r1
 8001624:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e00e      	b.n	8001648 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e006      	b.n	8001648 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
  }
}
 8001648:	4618      	mov	r0, r3
 800164a:	3724      	adds	r7, #36	@ 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001668:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d003      	beq.n	8001678 <HAL_CAN_GetRxMessage+0x24>
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b02      	cmp	r3, #2
 8001674:	f040 8103 	bne.w	800187e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10e      	bne.n	800169c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d116      	bne.n	80016ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0f7      	b.n	800188c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e0e8      	b.n	800188c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	331b      	adds	r3, #27
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0204 	and.w	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10c      	bne.n	80016f2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	331b      	adds	r3, #27
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0d5b      	lsrs	r3, r3, #21
 80016e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e00b      	b.n	800170a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	331b      	adds	r3, #27
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	331b      	adds	r3, #27
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0202 	and.w	r2, r3, #2
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	331b      	adds	r3, #27
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2208      	movs	r2, #8
 800173c:	611a      	str	r2, [r3, #16]
 800173e:	e00b      	b.n	8001758 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	331b      	adds	r3, #27
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	3304      	adds	r3, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 020f 	and.w	r2, r3, #15
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	331b      	adds	r3, #27
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	4413      	add	r3, r2
 8001764:	3304      	adds	r3, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	b2da      	uxtb	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	331b      	adds	r3, #27
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	4413      	add	r3, r2
 800177c:	3304      	adds	r3, #4
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0c1b      	lsrs	r3, r3, #16
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	0a1a      	lsrs	r2, r3, #8
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0c1a      	lsrs	r2, r3, #16
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3302      	adds	r3, #2
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	0e1a      	lsrs	r2, r3, #24
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	3303      	adds	r3, #3
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3304      	adds	r3, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0a1a      	lsrs	r2, r3, #8
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3305      	adds	r3, #5
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0c1a      	lsrs	r2, r3, #16
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3306      	adds	r3, #6
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0e1a      	lsrs	r2, r3, #24
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	3307      	adds	r3, #7
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d108      	bne.n	800186a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0220 	orr.w	r2, r2, #32
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	e007      	b.n	800187a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0220 	orr.w	r2, r2, #32
 8001878:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e006      	b.n	800188c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
  }
}
 800188c:	4618      	mov	r0, r3
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d002      	beq.n	80018b6 <HAL_CAN_ActivateNotification+0x1e>
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d109      	bne.n	80018ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6959      	ldr	r1, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e006      	b.n	80018d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
  }
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d07c      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d023      	beq.n	800197c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe ff88 	bl	800085c <HAL_CAN_TxMailbox0CompleteCallback>
 800194c:	e016      	b.n	800197c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001960:	e00c      	b.n	800197c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
 8001974:	e002      	b.n	800197c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f96b 	bl	8001c52 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d024      	beq.n	80019d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7fe ff8c 	bl	80008b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80019a0:	e016      	b.n	80019d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b4:	e00c      	b.n	80019d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c8:	e002      	b.n	80019d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f94b 	bl	8001c66 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d024      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe ff6c 	bl	80008cc <HAL_CAN_TxMailbox2CompleteCallback>
 80019f4:	e016      	b.n	8001a24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a08:	e00c      	b.n	8001a24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1c:	e002      	b.n	8001a24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f92b 	bl	8001c7a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2210      	movs	r2, #16
 8001a46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2208      	movs	r2, #8
 8001a62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f912 	bl	8001c8e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe ff2c 	bl	80008e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8f4 	bl	8001cb6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d009      	beq.n	8001aec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8db 	bl	8001ca2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2210      	movs	r2, #16
 8001b06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8de 	bl	8001cca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00b      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2208      	movs	r2, #8
 8001b28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8d7 	bl	8001cde <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d07b      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d072      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d043      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d03e      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bb2:	2b60      	cmp	r3, #96	@ 0x60
 8001bb4:	d02b      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x32a>
 8001bb6:	2b60      	cmp	r3, #96	@ 0x60
 8001bb8:	d82e      	bhi.n	8001c18 <HAL_CAN_IRQHandler+0x334>
 8001bba:	2b50      	cmp	r3, #80	@ 0x50
 8001bbc:	d022      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x320>
 8001bbe:	2b50      	cmp	r3, #80	@ 0x50
 8001bc0:	d82a      	bhi.n	8001c18 <HAL_CAN_IRQHandler+0x334>
 8001bc2:	2b40      	cmp	r3, #64	@ 0x40
 8001bc4:	d019      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x316>
 8001bc6:	2b40      	cmp	r3, #64	@ 0x40
 8001bc8:	d826      	bhi.n	8001c18 <HAL_CAN_IRQHandler+0x334>
 8001bca:	2b30      	cmp	r3, #48	@ 0x30
 8001bcc:	d010      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x30c>
 8001bce:	2b30      	cmp	r3, #48	@ 0x30
 8001bd0:	d822      	bhi.n	8001c18 <HAL_CAN_IRQHandler+0x334>
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d002      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x2f8>
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d005      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bda:	e01d      	b.n	8001c18 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	f043 0308 	orr.w	r3, r3, #8
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001be4:	e019      	b.n	8001c1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	f043 0310 	orr.w	r3, r3, #16
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bee:	e014      	b.n	8001c1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bf8:	e00f      	b.n	8001c1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c02:	e00a      	b.n	8001c1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c0c:	e005      	b.n	8001c1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c16:	e000      	b.n	8001c1a <HAL_CAN_IRQHandler+0x336>
            break;
 8001c18:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c28:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe fe85 	bl	8000954 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	@ 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x40>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x40>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00
 8001d38:	05fa0000 	.word	0x05fa0000

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff3e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff8e 	bl	8001de8 <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff31 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d106      	bne.n	8001f34 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f32:	e005      	b.n	8001f40 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f54:	f000 f802 	bl	8001f5c <HAL_SYSTICK_Callback>
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e175      	b.n	8002278 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 8164 	bne.w	8002272 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d005      	beq.n	8001fc2 <HAL_GPIO_Init+0x56>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d130      	bne.n	8002024 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b03      	cmp	r3, #3
 800202e:	d017      	beq.n	8002060 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80be 	beq.w	8002272 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	4b66      	ldr	r3, [pc, #408]	@ (8002290 <HAL_GPIO_Init+0x324>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	4a65      	ldr	r2, [pc, #404]	@ (8002290 <HAL_GPIO_Init+0x324>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002100:	6453      	str	r3, [r2, #68]	@ 0x44
 8002102:	4b63      	ldr	r3, [pc, #396]	@ (8002290 <HAL_GPIO_Init+0x324>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800210e:	4a61      	ldr	r2, [pc, #388]	@ (8002294 <HAL_GPIO_Init+0x328>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a58      	ldr	r2, [pc, #352]	@ (8002298 <HAL_GPIO_Init+0x32c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d037      	beq.n	80021aa <HAL_GPIO_Init+0x23e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a57      	ldr	r2, [pc, #348]	@ (800229c <HAL_GPIO_Init+0x330>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d031      	beq.n	80021a6 <HAL_GPIO_Init+0x23a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a56      	ldr	r2, [pc, #344]	@ (80022a0 <HAL_GPIO_Init+0x334>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d02b      	beq.n	80021a2 <HAL_GPIO_Init+0x236>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a55      	ldr	r2, [pc, #340]	@ (80022a4 <HAL_GPIO_Init+0x338>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d025      	beq.n	800219e <HAL_GPIO_Init+0x232>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a54      	ldr	r2, [pc, #336]	@ (80022a8 <HAL_GPIO_Init+0x33c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01f      	beq.n	800219a <HAL_GPIO_Init+0x22e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a53      	ldr	r2, [pc, #332]	@ (80022ac <HAL_GPIO_Init+0x340>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d019      	beq.n	8002196 <HAL_GPIO_Init+0x22a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	@ (80022b0 <HAL_GPIO_Init+0x344>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0x226>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a51      	ldr	r2, [pc, #324]	@ (80022b4 <HAL_GPIO_Init+0x348>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00d      	beq.n	800218e <HAL_GPIO_Init+0x222>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a50      	ldr	r2, [pc, #320]	@ (80022b8 <HAL_GPIO_Init+0x34c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x21e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	@ (80022bc <HAL_GPIO_Init+0x350>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_GPIO_Init+0x21a>
 8002182:	2309      	movs	r3, #9
 8002184:	e012      	b.n	80021ac <HAL_GPIO_Init+0x240>
 8002186:	230a      	movs	r3, #10
 8002188:	e010      	b.n	80021ac <HAL_GPIO_Init+0x240>
 800218a:	2308      	movs	r3, #8
 800218c:	e00e      	b.n	80021ac <HAL_GPIO_Init+0x240>
 800218e:	2307      	movs	r3, #7
 8002190:	e00c      	b.n	80021ac <HAL_GPIO_Init+0x240>
 8002192:	2306      	movs	r3, #6
 8002194:	e00a      	b.n	80021ac <HAL_GPIO_Init+0x240>
 8002196:	2305      	movs	r3, #5
 8002198:	e008      	b.n	80021ac <HAL_GPIO_Init+0x240>
 800219a:	2304      	movs	r3, #4
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x240>
 800219e:	2303      	movs	r3, #3
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x240>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x240>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x240>
 80021aa:	2300      	movs	r3, #0
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f002 0203 	and.w	r2, r2, #3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4093      	lsls	r3, r2
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021bc:	4935      	ldr	r1, [pc, #212]	@ (8002294 <HAL_GPIO_Init+0x328>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b3d      	ldr	r3, [pc, #244]	@ (80022c0 <HAL_GPIO_Init+0x354>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a34      	ldr	r2, [pc, #208]	@ (80022c0 <HAL_GPIO_Init+0x354>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <HAL_GPIO_Init+0x354>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a29      	ldr	r2, [pc, #164]	@ (80022c0 <HAL_GPIO_Init+0x354>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221e:	4b28      	ldr	r3, [pc, #160]	@ (80022c0 <HAL_GPIO_Init+0x354>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002242:	4a1f      	ldr	r2, [pc, #124]	@ (80022c0 <HAL_GPIO_Init+0x354>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002248:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <HAL_GPIO_Init+0x354>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226c:	4a14      	ldr	r2, [pc, #80]	@ (80022c0 <HAL_GPIO_Init+0x354>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b0f      	cmp	r3, #15
 800227c:	f67f ae86 	bls.w	8001f8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40021400 	.word	0x40021400
 80022b0:	40021800 	.word	0x40021800
 80022b4:	40021c00 	.word	0x40021c00
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40022400 	.word	0x40022400
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f806 	bl	8002328 <HAL_GPIO_EXTI_Callback>
  }
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e29b      	b.n	800288e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8087 	beq.w	8002472 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002364:	4b96      	ldr	r3, [pc, #600]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b04      	cmp	r3, #4
 800236e:	d00c      	beq.n	800238a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002370:	4b93      	ldr	r3, [pc, #588]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d112      	bne.n	80023a2 <HAL_RCC_OscConfig+0x62>
 800237c:	4b90      	ldr	r3, [pc, #576]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002388:	d10b      	bne.n	80023a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238a:	4b8d      	ldr	r3, [pc, #564]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d06c      	beq.n	8002470 <HAL_RCC_OscConfig+0x130>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d168      	bne.n	8002470 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e275      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x7a>
 80023ac:	4b84      	ldr	r3, [pc, #528]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a83      	ldr	r2, [pc, #524]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e02e      	b.n	8002418 <HAL_RCC_OscConfig+0xd8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x9c>
 80023c2:	4b7f      	ldr	r3, [pc, #508]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7e      	ldr	r2, [pc, #504]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b7c      	ldr	r3, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7b      	ldr	r2, [pc, #492]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xd8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0xc0>
 80023e6:	4b76      	ldr	r3, [pc, #472]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a75      	ldr	r2, [pc, #468]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b73      	ldr	r3, [pc, #460]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a72      	ldr	r2, [pc, #456]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xd8>
 8002400:	4b6f      	ldr	r3, [pc, #444]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6e      	ldr	r2, [pc, #440]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b6c      	ldr	r3, [pc, #432]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6b      	ldr	r2, [pc, #428]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fe10 	bl	8001044 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe fe0c 	bl	8001044 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e229      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b61      	ldr	r3, [pc, #388]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xe8>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fdfc 	bl	8001044 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fdf8 	bl	8001044 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e215      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b57      	ldr	r3, [pc, #348]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x110>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d069      	beq.n	8002552 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247e:	4b50      	ldr	r3, [pc, #320]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b4d      	ldr	r3, [pc, #308]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b08      	cmp	r3, #8
 8002494:	d11c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x190>
 8002496:	4b4a      	ldr	r3, [pc, #296]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	4b47      	ldr	r3, [pc, #284]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x17a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1e9      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	493d      	ldr	r1, [pc, #244]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	e040      	b.n	8002552 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d023      	beq.n	8002520 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d8:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a38      	ldr	r2, [pc, #224]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fdae 	bl	8001044 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ec:	f7fe fdaa 	bl	8001044 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1c7      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fe:	4b30      	ldr	r3, [pc, #192]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4929      	ldr	r1, [pc, #164]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
 800251e:	e018      	b.n	8002552 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002520:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a26      	ldr	r2, [pc, #152]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fd8a 	bl	8001044 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7fe fd86 	bl	8001044 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1a3      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d038      	beq.n	80025d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d019      	beq.n	800259a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256a:	4a15      	ldr	r2, [pc, #84]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe fd67 	bl	8001044 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257a:	f7fe fd63 	bl	8001044 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e180      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x23a>
 8002598:	e01a      	b.n	80025d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 800259c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259e:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <HAL_RCC_OscConfig+0x280>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fd4d 	bl	8001044 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ae:	f7fe fd49 	bl	8001044 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d903      	bls.n	80025c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e166      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
 80025c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	4b92      	ldr	r3, [pc, #584]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a4 	beq.w	8002726 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b8c      	ldr	r3, [pc, #560]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b89      	ldr	r3, [pc, #548]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a88      	ldr	r2, [pc, #544]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f6:	4b86      	ldr	r3, [pc, #536]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002606:	4b83      	ldr	r3, [pc, #524]	@ (8002814 <HAL_RCC_OscConfig+0x4d4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d118      	bne.n	8002644 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002612:	4b80      	ldr	r3, [pc, #512]	@ (8002814 <HAL_RCC_OscConfig+0x4d4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7f      	ldr	r2, [pc, #508]	@ (8002814 <HAL_RCC_OscConfig+0x4d4>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7fe fd11 	bl	8001044 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7fe fd0d 	bl	8001044 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	@ 0x64
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e12a      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002638:	4b76      	ldr	r3, [pc, #472]	@ (8002814 <HAL_RCC_OscConfig+0x4d4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x31a>
 800264c:	4b70      	ldr	r3, [pc, #448]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002650:	4a6f      	ldr	r2, [pc, #444]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	@ 0x70
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_OscConfig+0x376>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x33c>
 8002662:	4b6b      	ldr	r3, [pc, #428]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	4a6a      	ldr	r2, [pc, #424]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	@ 0x70
 800266e:	4b68      	ldr	r3, [pc, #416]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002672:	4a67      	ldr	r2, [pc, #412]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	6713      	str	r3, [r2, #112]	@ 0x70
 800267a:	e01c      	b.n	80026b6 <HAL_RCC_OscConfig+0x376>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x35e>
 8002684:	4b62      	ldr	r3, [pc, #392]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002688:	4a61      	ldr	r2, [pc, #388]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002690:	4b5f      	ldr	r3, [pc, #380]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	4a5e      	ldr	r2, [pc, #376]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6713      	str	r3, [r2, #112]	@ 0x70
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x376>
 800269e:	4b5c      	ldr	r3, [pc, #368]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026aa:	4b59      	ldr	r3, [pc, #356]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ae:	4a58      	ldr	r2, [pc, #352]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d015      	beq.n	80026ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe fcc1 	bl	8001044 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fcbd 	bl	8001044 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0d8      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RCC_OscConfig+0x386>
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fcab 	bl	8001044 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fca7 	bl	8001044 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0c2      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	4b41      	ldr	r3, [pc, #260]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ee      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d105      	bne.n	8002726 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271a:	4b3d      	ldr	r3, [pc, #244]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	4a3c      	ldr	r2, [pc, #240]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002720:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80ae 	beq.w	800288c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b08      	cmp	r3, #8
 800273a:	d06d      	beq.n	8002818 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d14b      	bne.n	80027dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	4b32      	ldr	r3, [pc, #200]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a31      	ldr	r2, [pc, #196]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 800274a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800274e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fc78 	bl	8001044 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fc74 	bl	8001044 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e091      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276a:	4b29      	ldr	r3, [pc, #164]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	3b01      	subs	r3, #1
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	071b      	lsls	r3, r3, #28
 80027a2:	491b      	ldr	r1, [pc, #108]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80027ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fc46 	bl	8001044 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fc42 	bl	8001044 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e05f      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x47c>
 80027da:	e057      	b.n	800288c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fc2c 	bl	8001044 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fc28 	bl	8001044 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e045      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <HAL_RCC_OscConfig+0x4d0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x4b0>
 800280e:	e03d      	b.n	800288c <HAL_RCC_OscConfig+0x54c>
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002818:	4b1f      	ldr	r3, [pc, #124]	@ (8002898 <HAL_RCC_OscConfig+0x558>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d030      	beq.n	8002888 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d129      	bne.n	8002888 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d122      	bne.n	8002888 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800284e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002850:	4293      	cmp	r3, r2
 8002852:	d119      	bne.n	8002888 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d10f      	bne.n	8002888 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800

0800289c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0d0      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d910      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b67      	ldr	r3, [pc, #412]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 020f 	bic.w	r2, r3, #15
 80028ca:	4965      	ldr	r1, [pc, #404]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b63      	ldr	r3, [pc, #396]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0b8      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028fc:	4b59      	ldr	r3, [pc, #356]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a58      	ldr	r2, [pc, #352]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002902:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002906:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002914:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 800291a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800291e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b50      	ldr	r3, [pc, #320]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	494d      	ldr	r1, [pc, #308]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d040      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d115      	bne.n	800297e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e07f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e073      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e06b      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b39      	ldr	r3, [pc, #228]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4936      	ldr	r1, [pc, #216]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fb58 	bl	8001044 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe fb54 	bl	8001044 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e053      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d210      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 020f 	bic.w	r2, r3, #15
 80029d6:	4922      	ldr	r1, [pc, #136]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e032      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4916      	ldr	r1, [pc, #88]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a1a:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	490e      	ldr	r1, [pc, #56]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2e:	f000 f821 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c8>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	490a      	ldr	r1, [pc, #40]	@ (8002a68 <HAL_RCC_ClockConfig+0x1cc>)
 8002a40:	5ccb      	ldrb	r3, [r1, r3]
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	4a09      	ldr	r2, [pc, #36]	@ (8002a6c <HAL_RCC_ClockConfig+0x1d0>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a4a:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <HAL_RCC_ClockConfig+0x1d4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fab4 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023c00 	.word	0x40023c00
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08004c9c 	.word	0x08004c9c
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b094      	sub	sp, #80	@ 0x50
 8002a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a80:	2300      	movs	r3, #0
 8002a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a84:	2300      	movs	r3, #0
 8002a86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a8c:	4b79      	ldr	r3, [pc, #484]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d00d      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	f200 80e1 	bhi.w	8002c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_GetSysClockFreq+0x3a>
 8002aa6:	e0db      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b73      	ldr	r3, [pc, #460]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aac:	e0db      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aae:	4b73      	ldr	r3, [pc, #460]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ab2:	e0d8      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002abc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002abe:	4b6d      	ldr	r3, [pc, #436]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d063      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aca:	4b6a      	ldr	r3, [pc, #424]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ad4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	462b      	mov	r3, r5
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	0159      	lsls	r1, r3, #5
 8002af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af8:	0150      	lsls	r0, r2, #5
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4621      	mov	r1, r4
 8002b00:	1a51      	subs	r1, r2, r1
 8002b02:	6139      	str	r1, [r7, #16]
 8002b04:	4629      	mov	r1, r5
 8002b06:	eb63 0301 	sbc.w	r3, r3, r1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b18:	4659      	mov	r1, fp
 8002b1a:	018b      	lsls	r3, r1, #6
 8002b1c:	4651      	mov	r1, sl
 8002b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b22:	4651      	mov	r1, sl
 8002b24:	018a      	lsls	r2, r1, #6
 8002b26:	4651      	mov	r1, sl
 8002b28:	ebb2 0801 	subs.w	r8, r2, r1
 8002b2c:	4659      	mov	r1, fp
 8002b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b46:	4690      	mov	r8, r2
 8002b48:	4699      	mov	r9, r3
 8002b4a:	4623      	mov	r3, r4
 8002b4c:	eb18 0303 	adds.w	r3, r8, r3
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	462b      	mov	r3, r5
 8002b54:	eb49 0303 	adc.w	r3, r9, r3
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b66:	4629      	mov	r1, r5
 8002b68:	024b      	lsls	r3, r1, #9
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b70:	4621      	mov	r1, r4
 8002b72:	024a      	lsls	r2, r1, #9
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b84:	f7fd fbac 	bl	80002e0 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b90:	e058      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b38      	ldr	r3, [pc, #224]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bac:	4642      	mov	r2, r8
 8002bae:	464b      	mov	r3, r9
 8002bb0:	f04f 0000 	mov.w	r0, #0
 8002bb4:	f04f 0100 	mov.w	r1, #0
 8002bb8:	0159      	lsls	r1, r3, #5
 8002bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bbe:	0150      	lsls	r0, r2, #5
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bca:	4649      	mov	r1, r9
 8002bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002be4:	ebb2 040a 	subs.w	r4, r2, sl
 8002be8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	00eb      	lsls	r3, r5, #3
 8002bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bfa:	00e2      	lsls	r2, r4, #3
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	4643      	mov	r3, r8
 8002c02:	18e3      	adds	r3, r4, r3
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	464b      	mov	r3, r9
 8002c08:	eb45 0303 	adc.w	r3, r5, r3
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	028b      	lsls	r3, r1, #10
 8002c1e:	4621      	mov	r1, r4
 8002c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c24:	4621      	mov	r1, r4
 8002c26:	028a      	lsls	r2, r1, #10
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	61fa      	str	r2, [r7, #28]
 8002c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c38:	f7fd fb52 	bl	80002e0 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4613      	mov	r3, r2
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3750      	adds	r7, #80	@ 0x50
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	007a1200 	.word	0x007a1200

08002c80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c9c:	f7ff fff0 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0a9b      	lsrs	r3, r3, #10
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4903      	ldr	r1, [pc, #12]	@ (8002cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08004cac 	.word	0x08004cac

08002cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc4:	f7ff ffdc 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0b5b      	lsrs	r3, r3, #13
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	@ (8002ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08004cac 	.word	0x08004cac

08002ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d020      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01b      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0202 	mvn.w	r2, #2
 8002d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8e9 	bl	8002f0a <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8db 	bl	8002ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8ec 	bl	8002f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d020      	beq.n	8002d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01b      	beq.n	8002d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0204 	mvn.w	r2, #4
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8c3 	bl	8002f0a <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8b5 	bl	8002ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f8c6 	bl	8002f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d020      	beq.n	8002de4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0208 	mvn.w	r2, #8
 8002db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2204      	movs	r2, #4
 8002dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f89d 	bl	8002f0a <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f88f 	bl	8002ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f8a0 	bl	8002f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d020      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01b      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0210 	mvn.w	r2, #16
 8002e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2208      	movs	r2, #8
 8002e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f877 	bl	8002f0a <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f869 	bl	8002ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f87a 	bl	8002f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00c      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0201 	mvn.w	r2, #1
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd fc24 	bl	800069c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d104      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f86c 	bl	8002f5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f864 	bl	8002f6e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00c      	beq.n	8002eca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f834 	bl	8002f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00c      	beq.n	8002eee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f06f 0220 	mvn.w	r2, #32
 8002ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f82c 	bl	8002f46 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e040      	b.n	8003016 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d106      	bne.n	8002faa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fd fe63 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2224      	movs	r2, #36	@ 0x24
 8002fae:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fa8d 	bl	80034e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f826 	bl	8003020 <UART_SetConfig>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e01b      	b.n	8003016 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ffc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fb0c 	bl	800362c <UART_CheckIdleState>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4ba6      	ldr	r3, [pc, #664]	@ (80032e4 <UART_SetConfig+0x2c4>)
 800304c:	4013      	ands	r3, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	6979      	ldr	r1, [r7, #20]
 8003054:	430b      	orrs	r3, r1
 8003056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a94      	ldr	r2, [pc, #592]	@ (80032e8 <UART_SetConfig+0x2c8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d120      	bne.n	80030de <UART_SetConfig+0xbe>
 800309c:	4b93      	ldr	r3, [pc, #588]	@ (80032ec <UART_SetConfig+0x2cc>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d816      	bhi.n	80030d8 <UART_SetConfig+0xb8>
 80030aa:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <UART_SetConfig+0x90>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030cd 	.word	0x080030cd
 80030b8:	080030c7 	.word	0x080030c7
 80030bc:	080030d3 	.word	0x080030d3
 80030c0:	2301      	movs	r3, #1
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e150      	b.n	8003368 <UART_SetConfig+0x348>
 80030c6:	2302      	movs	r3, #2
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e14d      	b.n	8003368 <UART_SetConfig+0x348>
 80030cc:	2304      	movs	r3, #4
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e14a      	b.n	8003368 <UART_SetConfig+0x348>
 80030d2:	2308      	movs	r3, #8
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e147      	b.n	8003368 <UART_SetConfig+0x348>
 80030d8:	2310      	movs	r3, #16
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e144      	b.n	8003368 <UART_SetConfig+0x348>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a83      	ldr	r2, [pc, #524]	@ (80032f0 <UART_SetConfig+0x2d0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d132      	bne.n	800314e <UART_SetConfig+0x12e>
 80030e8:	4b80      	ldr	r3, [pc, #512]	@ (80032ec <UART_SetConfig+0x2cc>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d828      	bhi.n	8003148 <UART_SetConfig+0x128>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <UART_SetConfig+0xdc>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003149 	.word	0x08003149
 8003104:	08003149 	.word	0x08003149
 8003108:	08003149 	.word	0x08003149
 800310c:	0800313d 	.word	0x0800313d
 8003110:	08003149 	.word	0x08003149
 8003114:	08003149 	.word	0x08003149
 8003118:	08003149 	.word	0x08003149
 800311c:	08003137 	.word	0x08003137
 8003120:	08003149 	.word	0x08003149
 8003124:	08003149 	.word	0x08003149
 8003128:	08003149 	.word	0x08003149
 800312c:	08003143 	.word	0x08003143
 8003130:	2300      	movs	r3, #0
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e118      	b.n	8003368 <UART_SetConfig+0x348>
 8003136:	2302      	movs	r3, #2
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e115      	b.n	8003368 <UART_SetConfig+0x348>
 800313c:	2304      	movs	r3, #4
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e112      	b.n	8003368 <UART_SetConfig+0x348>
 8003142:	2308      	movs	r3, #8
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e10f      	b.n	8003368 <UART_SetConfig+0x348>
 8003148:	2310      	movs	r3, #16
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e10c      	b.n	8003368 <UART_SetConfig+0x348>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a68      	ldr	r2, [pc, #416]	@ (80032f4 <UART_SetConfig+0x2d4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d120      	bne.n	800319a <UART_SetConfig+0x17a>
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <UART_SetConfig+0x2cc>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003162:	2b30      	cmp	r3, #48	@ 0x30
 8003164:	d013      	beq.n	800318e <UART_SetConfig+0x16e>
 8003166:	2b30      	cmp	r3, #48	@ 0x30
 8003168:	d814      	bhi.n	8003194 <UART_SetConfig+0x174>
 800316a:	2b20      	cmp	r3, #32
 800316c:	d009      	beq.n	8003182 <UART_SetConfig+0x162>
 800316e:	2b20      	cmp	r3, #32
 8003170:	d810      	bhi.n	8003194 <UART_SetConfig+0x174>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <UART_SetConfig+0x15c>
 8003176:	2b10      	cmp	r3, #16
 8003178:	d006      	beq.n	8003188 <UART_SetConfig+0x168>
 800317a:	e00b      	b.n	8003194 <UART_SetConfig+0x174>
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e0f2      	b.n	8003368 <UART_SetConfig+0x348>
 8003182:	2302      	movs	r3, #2
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e0ef      	b.n	8003368 <UART_SetConfig+0x348>
 8003188:	2304      	movs	r3, #4
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e0ec      	b.n	8003368 <UART_SetConfig+0x348>
 800318e:	2308      	movs	r3, #8
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e0e9      	b.n	8003368 <UART_SetConfig+0x348>
 8003194:	2310      	movs	r3, #16
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e0e6      	b.n	8003368 <UART_SetConfig+0x348>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a56      	ldr	r2, [pc, #344]	@ (80032f8 <UART_SetConfig+0x2d8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d120      	bne.n	80031e6 <UART_SetConfig+0x1c6>
 80031a4:	4b51      	ldr	r3, [pc, #324]	@ (80032ec <UART_SetConfig+0x2cc>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b0:	d013      	beq.n	80031da <UART_SetConfig+0x1ba>
 80031b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b4:	d814      	bhi.n	80031e0 <UART_SetConfig+0x1c0>
 80031b6:	2b80      	cmp	r3, #128	@ 0x80
 80031b8:	d009      	beq.n	80031ce <UART_SetConfig+0x1ae>
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d810      	bhi.n	80031e0 <UART_SetConfig+0x1c0>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <UART_SetConfig+0x1a8>
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	d006      	beq.n	80031d4 <UART_SetConfig+0x1b4>
 80031c6:	e00b      	b.n	80031e0 <UART_SetConfig+0x1c0>
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e0cc      	b.n	8003368 <UART_SetConfig+0x348>
 80031ce:	2302      	movs	r3, #2
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e0c9      	b.n	8003368 <UART_SetConfig+0x348>
 80031d4:	2304      	movs	r3, #4
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e0c6      	b.n	8003368 <UART_SetConfig+0x348>
 80031da:	2308      	movs	r3, #8
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e0c3      	b.n	8003368 <UART_SetConfig+0x348>
 80031e0:	2310      	movs	r3, #16
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e0c0      	b.n	8003368 <UART_SetConfig+0x348>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a44      	ldr	r2, [pc, #272]	@ (80032fc <UART_SetConfig+0x2dc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d125      	bne.n	800323c <UART_SetConfig+0x21c>
 80031f0:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <UART_SetConfig+0x2cc>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031fe:	d017      	beq.n	8003230 <UART_SetConfig+0x210>
 8003200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003204:	d817      	bhi.n	8003236 <UART_SetConfig+0x216>
 8003206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800320a:	d00b      	beq.n	8003224 <UART_SetConfig+0x204>
 800320c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003210:	d811      	bhi.n	8003236 <UART_SetConfig+0x216>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <UART_SetConfig+0x1fe>
 8003216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800321a:	d006      	beq.n	800322a <UART_SetConfig+0x20a>
 800321c:	e00b      	b.n	8003236 <UART_SetConfig+0x216>
 800321e:	2300      	movs	r3, #0
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e0a1      	b.n	8003368 <UART_SetConfig+0x348>
 8003224:	2302      	movs	r3, #2
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e09e      	b.n	8003368 <UART_SetConfig+0x348>
 800322a:	2304      	movs	r3, #4
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e09b      	b.n	8003368 <UART_SetConfig+0x348>
 8003230:	2308      	movs	r3, #8
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e098      	b.n	8003368 <UART_SetConfig+0x348>
 8003236:	2310      	movs	r3, #16
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e095      	b.n	8003368 <UART_SetConfig+0x348>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2f      	ldr	r2, [pc, #188]	@ (8003300 <UART_SetConfig+0x2e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d125      	bne.n	8003292 <UART_SetConfig+0x272>
 8003246:	4b29      	ldr	r3, [pc, #164]	@ (80032ec <UART_SetConfig+0x2cc>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003250:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003254:	d017      	beq.n	8003286 <UART_SetConfig+0x266>
 8003256:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800325a:	d817      	bhi.n	800328c <UART_SetConfig+0x26c>
 800325c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003260:	d00b      	beq.n	800327a <UART_SetConfig+0x25a>
 8003262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003266:	d811      	bhi.n	800328c <UART_SetConfig+0x26c>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <UART_SetConfig+0x254>
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003270:	d006      	beq.n	8003280 <UART_SetConfig+0x260>
 8003272:	e00b      	b.n	800328c <UART_SetConfig+0x26c>
 8003274:	2301      	movs	r3, #1
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e076      	b.n	8003368 <UART_SetConfig+0x348>
 800327a:	2302      	movs	r3, #2
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	e073      	b.n	8003368 <UART_SetConfig+0x348>
 8003280:	2304      	movs	r3, #4
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e070      	b.n	8003368 <UART_SetConfig+0x348>
 8003286:	2308      	movs	r3, #8
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e06d      	b.n	8003368 <UART_SetConfig+0x348>
 800328c:	2310      	movs	r3, #16
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e06a      	b.n	8003368 <UART_SetConfig+0x348>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1b      	ldr	r2, [pc, #108]	@ (8003304 <UART_SetConfig+0x2e4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d138      	bne.n	800330e <UART_SetConfig+0x2ee>
 800329c:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <UART_SetConfig+0x2cc>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80032a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032aa:	d017      	beq.n	80032dc <UART_SetConfig+0x2bc>
 80032ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032b0:	d82a      	bhi.n	8003308 <UART_SetConfig+0x2e8>
 80032b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032b6:	d00b      	beq.n	80032d0 <UART_SetConfig+0x2b0>
 80032b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032bc:	d824      	bhi.n	8003308 <UART_SetConfig+0x2e8>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <UART_SetConfig+0x2aa>
 80032c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032c6:	d006      	beq.n	80032d6 <UART_SetConfig+0x2b6>
 80032c8:	e01e      	b.n	8003308 <UART_SetConfig+0x2e8>
 80032ca:	2300      	movs	r3, #0
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e04b      	b.n	8003368 <UART_SetConfig+0x348>
 80032d0:	2302      	movs	r3, #2
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e048      	b.n	8003368 <UART_SetConfig+0x348>
 80032d6:	2304      	movs	r3, #4
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e045      	b.n	8003368 <UART_SetConfig+0x348>
 80032dc:	2308      	movs	r3, #8
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e042      	b.n	8003368 <UART_SetConfig+0x348>
 80032e2:	bf00      	nop
 80032e4:	efff69f3 	.word	0xefff69f3
 80032e8:	40011000 	.word	0x40011000
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40004400 	.word	0x40004400
 80032f4:	40004800 	.word	0x40004800
 80032f8:	40004c00 	.word	0x40004c00
 80032fc:	40005000 	.word	0x40005000
 8003300:	40011400 	.word	0x40011400
 8003304:	40007800 	.word	0x40007800
 8003308:	2310      	movs	r3, #16
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e02c      	b.n	8003368 <UART_SetConfig+0x348>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a72      	ldr	r2, [pc, #456]	@ (80034dc <UART_SetConfig+0x4bc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d125      	bne.n	8003364 <UART_SetConfig+0x344>
 8003318:	4b71      	ldr	r3, [pc, #452]	@ (80034e0 <UART_SetConfig+0x4c0>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003322:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003326:	d017      	beq.n	8003358 <UART_SetConfig+0x338>
 8003328:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800332c:	d817      	bhi.n	800335e <UART_SetConfig+0x33e>
 800332e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003332:	d00b      	beq.n	800334c <UART_SetConfig+0x32c>
 8003334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003338:	d811      	bhi.n	800335e <UART_SetConfig+0x33e>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <UART_SetConfig+0x326>
 800333e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003342:	d006      	beq.n	8003352 <UART_SetConfig+0x332>
 8003344:	e00b      	b.n	800335e <UART_SetConfig+0x33e>
 8003346:	2300      	movs	r3, #0
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	e00d      	b.n	8003368 <UART_SetConfig+0x348>
 800334c:	2302      	movs	r3, #2
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e00a      	b.n	8003368 <UART_SetConfig+0x348>
 8003352:	2304      	movs	r3, #4
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e007      	b.n	8003368 <UART_SetConfig+0x348>
 8003358:	2308      	movs	r3, #8
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e004      	b.n	8003368 <UART_SetConfig+0x348>
 800335e:	2310      	movs	r3, #16
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e001      	b.n	8003368 <UART_SetConfig+0x348>
 8003364:	2310      	movs	r3, #16
 8003366:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003370:	d15b      	bne.n	800342a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003372:	7ffb      	ldrb	r3, [r7, #31]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d828      	bhi.n	80033ca <UART_SetConfig+0x3aa>
 8003378:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <UART_SetConfig+0x360>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	080033a5 	.word	0x080033a5
 8003384:	080033ad 	.word	0x080033ad
 8003388:	080033b5 	.word	0x080033b5
 800338c:	080033cb 	.word	0x080033cb
 8003390:	080033bb 	.word	0x080033bb
 8003394:	080033cb 	.word	0x080033cb
 8003398:	080033cb 	.word	0x080033cb
 800339c:	080033cb 	.word	0x080033cb
 80033a0:	080033c3 	.word	0x080033c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a4:	f7ff fc78 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80033a8:	61b8      	str	r0, [r7, #24]
        break;
 80033aa:	e013      	b.n	80033d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033ac:	f7ff fc88 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 80033b0:	61b8      	str	r0, [r7, #24]
        break;
 80033b2:	e00f      	b.n	80033d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b4:	4b4b      	ldr	r3, [pc, #300]	@ (80034e4 <UART_SetConfig+0x4c4>)
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e00c      	b.n	80033d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ba:	f7ff fb5b 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80033be:	61b8      	str	r0, [r7, #24]
        break;
 80033c0:	e008      	b.n	80033d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c6:	61bb      	str	r3, [r7, #24]
        break;
 80033c8:	e004      	b.n	80033d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	77bb      	strb	r3, [r7, #30]
        break;
 80033d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d074      	beq.n	80034c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	005a      	lsls	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	d916      	bls.n	8003424 <UART_SetConfig+0x404>
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033fc:	d212      	bcs.n	8003424 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f023 030f 	bic.w	r3, r3, #15
 8003406:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	b29b      	uxth	r3, r3
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	b29a      	uxth	r2, r3
 8003414:	89fb      	ldrh	r3, [r7, #14]
 8003416:	4313      	orrs	r3, r2
 8003418:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	89fa      	ldrh	r2, [r7, #14]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	e04f      	b.n	80034c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	77bb      	strb	r3, [r7, #30]
 8003428:	e04c      	b.n	80034c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800342a:	7ffb      	ldrb	r3, [r7, #31]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d828      	bhi.n	8003482 <UART_SetConfig+0x462>
 8003430:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <UART_SetConfig+0x418>)
 8003432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003436:	bf00      	nop
 8003438:	0800345d 	.word	0x0800345d
 800343c:	08003465 	.word	0x08003465
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003483 	.word	0x08003483
 8003448:	08003473 	.word	0x08003473
 800344c:	08003483 	.word	0x08003483
 8003450:	08003483 	.word	0x08003483
 8003454:	08003483 	.word	0x08003483
 8003458:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7ff fc1c 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8003460:	61b8      	str	r0, [r7, #24]
        break;
 8003462:	e013      	b.n	800348c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7ff fc2c 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003468:	61b8      	str	r0, [r7, #24]
        break;
 800346a:	e00f      	b.n	800348c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800346c:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <UART_SetConfig+0x4c4>)
 800346e:	61bb      	str	r3, [r7, #24]
        break;
 8003470:	e00c      	b.n	800348c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7ff faff 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8003476:	61b8      	str	r0, [r7, #24]
        break;
 8003478:	e008      	b.n	800348c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347e:	61bb      	str	r3, [r7, #24]
        break;
 8003480:	e004      	b.n	800348c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	77bb      	strb	r3, [r7, #30]
        break;
 800348a:	bf00      	nop
    }

    if (pclk != 0U)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d018      	beq.n	80034c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	085a      	lsrs	r2, r3, #1
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	441a      	add	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b0f      	cmp	r3, #15
 80034aa:	d909      	bls.n	80034c0 <UART_SetConfig+0x4a0>
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b2:	d205      	bcs.n	80034c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	e001      	b.n	80034c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40007c00 	.word	0x40007c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400

080034e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01a      	beq.n	80035fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e6:	d10a      	bne.n	80035fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
  }
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b098      	sub	sp, #96	@ 0x60
 8003630:	af02      	add	r7, sp, #8
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800363c:	f7fd fd02 	bl	8001044 <HAL_GetTick>
 8003640:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d12e      	bne.n	80036ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	2200      	movs	r2, #0
 800365a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f88c 	bl	800377c <UART_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d021      	beq.n	80036ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800367e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003688:	647b      	str	r3, [r7, #68]	@ 0x44
 800368a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800368e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e6      	bne.n	800366a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e062      	b.n	8003774 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d149      	bne.n	8003750 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c4:	2200      	movs	r2, #0
 80036c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f856 	bl	800377c <UART_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03c      	beq.n	8003750 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	623b      	str	r3, [r7, #32]
   return(result);
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e6      	bne.n	80036d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3308      	adds	r3, #8
 800370e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	60fb      	str	r3, [r7, #12]
   return(result);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003728:	61fa      	str	r2, [r7, #28]
 800372a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	69b9      	ldr	r1, [r7, #24]
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	617b      	str	r3, [r7, #20]
   return(result);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e5      	bne.n	8003708 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e011      	b.n	8003774 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3758      	adds	r7, #88	@ 0x58
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378c:	e04f      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d04b      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fd fc55 	bl	8001044 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <UART_WaitOnFlagUntilTimeout+0x30>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e04e      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d037      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb2>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b80      	cmp	r3, #128	@ 0x80
 80037c2:	d034      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb2>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d031      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d110      	bne.n	80037fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2208      	movs	r2, #8
 80037de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f838 	bl	8003856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2208      	movs	r2, #8
 80037ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e029      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003808:	d111      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f81e 	bl	8003856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e00f      	b.n	800384e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	bf0c      	ite	eq
 800383e:	2301      	moveq	r3, #1
 8003840:	2300      	movne	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	429a      	cmp	r2, r3
 800384a:	d0a0      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003856:	b480      	push	{r7}
 8003858:	b095      	sub	sp, #84	@ 0x54
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800387c:	643b      	str	r3, [r7, #64]	@ 0x40
 800387e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003882:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e6      	bne.n	800385e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3308      	adds	r3, #8
 8003896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d118      	bne.n	80038fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f023 0310 	bic.w	r3, r3, #16
 80038e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6979      	ldr	r1, [r7, #20]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	613b      	str	r3, [r7, #16]
   return(result);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e6      	bne.n	80038cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003912:	bf00      	nop
 8003914:	3754      	adds	r7, #84	@ 0x54
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <srand>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <srand+0x44>)
 8003924:	681d      	ldr	r5, [r3, #0]
 8003926:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003928:	4604      	mov	r4, r0
 800392a:	b9b3      	cbnz	r3, 800395a <srand+0x3a>
 800392c:	2018      	movs	r0, #24
 800392e:	f000 fa2f 	bl	8003d90 <malloc>
 8003932:	4602      	mov	r2, r0
 8003934:	6328      	str	r0, [r5, #48]	@ 0x30
 8003936:	b920      	cbnz	r0, 8003942 <srand+0x22>
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <srand+0x48>)
 800393a:	480c      	ldr	r0, [pc, #48]	@ (800396c <srand+0x4c>)
 800393c:	2146      	movs	r1, #70	@ 0x46
 800393e:	f000 f9bf 	bl	8003cc0 <__assert_func>
 8003942:	490b      	ldr	r1, [pc, #44]	@ (8003970 <srand+0x50>)
 8003944:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <srand+0x54>)
 8003946:	e9c0 1300 	strd	r1, r3, [r0]
 800394a:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <srand+0x58>)
 800394c:	6083      	str	r3, [r0, #8]
 800394e:	230b      	movs	r3, #11
 8003950:	8183      	strh	r3, [r0, #12]
 8003952:	2100      	movs	r1, #0
 8003954:	2001      	movs	r0, #1
 8003956:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800395a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800395c:	2200      	movs	r2, #0
 800395e:	611c      	str	r4, [r3, #16]
 8003960:	615a      	str	r2, [r3, #20]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	20000018 	.word	0x20000018
 8003968:	08004cb4 	.word	0x08004cb4
 800396c:	08004ccb 	.word	0x08004ccb
 8003970:	abcd330e 	.word	0xabcd330e
 8003974:	e66d1234 	.word	0xe66d1234
 8003978:	0005deec 	.word	0x0005deec

0800397c <std>:
 800397c:	2300      	movs	r3, #0
 800397e:	b510      	push	{r4, lr}
 8003980:	4604      	mov	r4, r0
 8003982:	e9c0 3300 	strd	r3, r3, [r0]
 8003986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800398a:	6083      	str	r3, [r0, #8]
 800398c:	8181      	strh	r1, [r0, #12]
 800398e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003990:	81c2      	strh	r2, [r0, #14]
 8003992:	6183      	str	r3, [r0, #24]
 8003994:	4619      	mov	r1, r3
 8003996:	2208      	movs	r2, #8
 8003998:	305c      	adds	r0, #92	@ 0x5c
 800399a:	f000 f914 	bl	8003bc6 <memset>
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <std+0x58>)
 80039a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <std+0x5c>)
 80039a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <std+0x60>)
 80039a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039aa:	4b0d      	ldr	r3, [pc, #52]	@ (80039e0 <std+0x64>)
 80039ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80039ae:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <std+0x68>)
 80039b0:	6224      	str	r4, [r4, #32]
 80039b2:	429c      	cmp	r4, r3
 80039b4:	d006      	beq.n	80039c4 <std+0x48>
 80039b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80039ba:	4294      	cmp	r4, r2
 80039bc:	d002      	beq.n	80039c4 <std+0x48>
 80039be:	33d0      	adds	r3, #208	@ 0xd0
 80039c0:	429c      	cmp	r4, r3
 80039c2:	d105      	bne.n	80039d0 <std+0x54>
 80039c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80039c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039cc:	f000 b974 	b.w	8003cb8 <__retarget_lock_init_recursive>
 80039d0:	bd10      	pop	{r4, pc}
 80039d2:	bf00      	nop
 80039d4:	08003b41 	.word	0x08003b41
 80039d8:	08003b63 	.word	0x08003b63
 80039dc:	08003b9b 	.word	0x08003b9b
 80039e0:	08003bbf 	.word	0x08003bbf
 80039e4:	20000190 	.word	0x20000190

080039e8 <stdio_exit_handler>:
 80039e8:	4a02      	ldr	r2, [pc, #8]	@ (80039f4 <stdio_exit_handler+0xc>)
 80039ea:	4903      	ldr	r1, [pc, #12]	@ (80039f8 <stdio_exit_handler+0x10>)
 80039ec:	4803      	ldr	r0, [pc, #12]	@ (80039fc <stdio_exit_handler+0x14>)
 80039ee:	f000 b869 	b.w	8003ac4 <_fwalk_sglue>
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	080045d1 	.word	0x080045d1
 80039fc:	2000001c 	.word	0x2000001c

08003a00 <cleanup_stdio>:
 8003a00:	6841      	ldr	r1, [r0, #4]
 8003a02:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <cleanup_stdio+0x34>)
 8003a04:	4299      	cmp	r1, r3
 8003a06:	b510      	push	{r4, lr}
 8003a08:	4604      	mov	r4, r0
 8003a0a:	d001      	beq.n	8003a10 <cleanup_stdio+0x10>
 8003a0c:	f000 fde0 	bl	80045d0 <_fflush_r>
 8003a10:	68a1      	ldr	r1, [r4, #8]
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <cleanup_stdio+0x38>)
 8003a14:	4299      	cmp	r1, r3
 8003a16:	d002      	beq.n	8003a1e <cleanup_stdio+0x1e>
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f000 fdd9 	bl	80045d0 <_fflush_r>
 8003a1e:	68e1      	ldr	r1, [r4, #12]
 8003a20:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <cleanup_stdio+0x3c>)
 8003a22:	4299      	cmp	r1, r3
 8003a24:	d004      	beq.n	8003a30 <cleanup_stdio+0x30>
 8003a26:	4620      	mov	r0, r4
 8003a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a2c:	f000 bdd0 	b.w	80045d0 <_fflush_r>
 8003a30:	bd10      	pop	{r4, pc}
 8003a32:	bf00      	nop
 8003a34:	20000190 	.word	0x20000190
 8003a38:	200001f8 	.word	0x200001f8
 8003a3c:	20000260 	.word	0x20000260

08003a40 <global_stdio_init.part.0>:
 8003a40:	b510      	push	{r4, lr}
 8003a42:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <global_stdio_init.part.0+0x30>)
 8003a44:	4c0b      	ldr	r4, [pc, #44]	@ (8003a74 <global_stdio_init.part.0+0x34>)
 8003a46:	4a0c      	ldr	r2, [pc, #48]	@ (8003a78 <global_stdio_init.part.0+0x38>)
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2104      	movs	r1, #4
 8003a50:	f7ff ff94 	bl	800397c <std>
 8003a54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2109      	movs	r1, #9
 8003a5c:	f7ff ff8e 	bl	800397c <std>
 8003a60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a64:	2202      	movs	r2, #2
 8003a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a6a:	2112      	movs	r1, #18
 8003a6c:	f7ff bf86 	b.w	800397c <std>
 8003a70:	200002c8 	.word	0x200002c8
 8003a74:	20000190 	.word	0x20000190
 8003a78:	080039e9 	.word	0x080039e9

08003a7c <__sfp_lock_acquire>:
 8003a7c:	4801      	ldr	r0, [pc, #4]	@ (8003a84 <__sfp_lock_acquire+0x8>)
 8003a7e:	f000 b91c 	b.w	8003cba <__retarget_lock_acquire_recursive>
 8003a82:	bf00      	nop
 8003a84:	200002d1 	.word	0x200002d1

08003a88 <__sfp_lock_release>:
 8003a88:	4801      	ldr	r0, [pc, #4]	@ (8003a90 <__sfp_lock_release+0x8>)
 8003a8a:	f000 b917 	b.w	8003cbc <__retarget_lock_release_recursive>
 8003a8e:	bf00      	nop
 8003a90:	200002d1 	.word	0x200002d1

08003a94 <__sinit>:
 8003a94:	b510      	push	{r4, lr}
 8003a96:	4604      	mov	r4, r0
 8003a98:	f7ff fff0 	bl	8003a7c <__sfp_lock_acquire>
 8003a9c:	6a23      	ldr	r3, [r4, #32]
 8003a9e:	b11b      	cbz	r3, 8003aa8 <__sinit+0x14>
 8003aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa4:	f7ff bff0 	b.w	8003a88 <__sfp_lock_release>
 8003aa8:	4b04      	ldr	r3, [pc, #16]	@ (8003abc <__sinit+0x28>)
 8003aaa:	6223      	str	r3, [r4, #32]
 8003aac:	4b04      	ldr	r3, [pc, #16]	@ (8003ac0 <__sinit+0x2c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f5      	bne.n	8003aa0 <__sinit+0xc>
 8003ab4:	f7ff ffc4 	bl	8003a40 <global_stdio_init.part.0>
 8003ab8:	e7f2      	b.n	8003aa0 <__sinit+0xc>
 8003aba:	bf00      	nop
 8003abc:	08003a01 	.word	0x08003a01
 8003ac0:	200002c8 	.word	0x200002c8

08003ac4 <_fwalk_sglue>:
 8003ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac8:	4607      	mov	r7, r0
 8003aca:	4688      	mov	r8, r1
 8003acc:	4614      	mov	r4, r2
 8003ace:	2600      	movs	r6, #0
 8003ad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ad8:	d505      	bpl.n	8003ae6 <_fwalk_sglue+0x22>
 8003ada:	6824      	ldr	r4, [r4, #0]
 8003adc:	2c00      	cmp	r4, #0
 8003ade:	d1f7      	bne.n	8003ad0 <_fwalk_sglue+0xc>
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae6:	89ab      	ldrh	r3, [r5, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d907      	bls.n	8003afc <_fwalk_sglue+0x38>
 8003aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003af0:	3301      	adds	r3, #1
 8003af2:	d003      	beq.n	8003afc <_fwalk_sglue+0x38>
 8003af4:	4629      	mov	r1, r5
 8003af6:	4638      	mov	r0, r7
 8003af8:	47c0      	blx	r8
 8003afa:	4306      	orrs	r6, r0
 8003afc:	3568      	adds	r5, #104	@ 0x68
 8003afe:	e7e9      	b.n	8003ad4 <_fwalk_sglue+0x10>

08003b00 <siprintf>:
 8003b00:	b40e      	push	{r1, r2, r3}
 8003b02:	b500      	push	{lr}
 8003b04:	b09c      	sub	sp, #112	@ 0x70
 8003b06:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b08:	9002      	str	r0, [sp, #8]
 8003b0a:	9006      	str	r0, [sp, #24]
 8003b0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b10:	4809      	ldr	r0, [pc, #36]	@ (8003b38 <siprintf+0x38>)
 8003b12:	9107      	str	r1, [sp, #28]
 8003b14:	9104      	str	r1, [sp, #16]
 8003b16:	4909      	ldr	r1, [pc, #36]	@ (8003b3c <siprintf+0x3c>)
 8003b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b1c:	9105      	str	r1, [sp, #20]
 8003b1e:	6800      	ldr	r0, [r0, #0]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	a902      	add	r1, sp, #8
 8003b24:	f000 fa46 	bl	8003fb4 <_svfiprintf_r>
 8003b28:	9b02      	ldr	r3, [sp, #8]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	b01c      	add	sp, #112	@ 0x70
 8003b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b34:	b003      	add	sp, #12
 8003b36:	4770      	bx	lr
 8003b38:	20000018 	.word	0x20000018
 8003b3c:	ffff0208 	.word	0xffff0208

08003b40 <__sread>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	460c      	mov	r4, r1
 8003b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b48:	f000 f868 	bl	8003c1c <_read_r>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	bfab      	itete	ge
 8003b50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b52:	89a3      	ldrhlt	r3, [r4, #12]
 8003b54:	181b      	addge	r3, r3, r0
 8003b56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b5a:	bfac      	ite	ge
 8003b5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b5e:	81a3      	strhlt	r3, [r4, #12]
 8003b60:	bd10      	pop	{r4, pc}

08003b62 <__swrite>:
 8003b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b66:	461f      	mov	r7, r3
 8003b68:	898b      	ldrh	r3, [r1, #12]
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	4616      	mov	r6, r2
 8003b72:	d505      	bpl.n	8003b80 <__swrite+0x1e>
 8003b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b78:	2302      	movs	r3, #2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f000 f83c 	bl	8003bf8 <_lseek_r>
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b8a:	81a3      	strh	r3, [r4, #12]
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	463b      	mov	r3, r7
 8003b90:	4628      	mov	r0, r5
 8003b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b96:	f000 b853 	b.w	8003c40 <_write_r>

08003b9a <__sseek>:
 8003b9a:	b510      	push	{r4, lr}
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba2:	f000 f829 	bl	8003bf8 <_lseek_r>
 8003ba6:	1c43      	adds	r3, r0, #1
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	bf15      	itete	ne
 8003bac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003bb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003bb6:	81a3      	strheq	r3, [r4, #12]
 8003bb8:	bf18      	it	ne
 8003bba:	81a3      	strhne	r3, [r4, #12]
 8003bbc:	bd10      	pop	{r4, pc}

08003bbe <__sclose>:
 8003bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc2:	f000 b809 	b.w	8003bd8 <_close_r>

08003bc6 <memset>:
 8003bc6:	4402      	add	r2, r0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d100      	bne.n	8003bd0 <memset+0xa>
 8003bce:	4770      	bx	lr
 8003bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd4:	e7f9      	b.n	8003bca <memset+0x4>
	...

08003bd8 <_close_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4d06      	ldr	r5, [pc, #24]	@ (8003bf4 <_close_r+0x1c>)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	602b      	str	r3, [r5, #0]
 8003be4:	f7fd f938 	bl	8000e58 <_close>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_close_r+0x1a>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_close_r+0x1a>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	200002cc 	.word	0x200002cc

08003bf8 <_lseek_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d07      	ldr	r5, [pc, #28]	@ (8003c18 <_lseek_r+0x20>)
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	4608      	mov	r0, r1
 8003c00:	4611      	mov	r1, r2
 8003c02:	2200      	movs	r2, #0
 8003c04:	602a      	str	r2, [r5, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f7fd f94d 	bl	8000ea6 <_lseek>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d102      	bne.n	8003c16 <_lseek_r+0x1e>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	b103      	cbz	r3, 8003c16 <_lseek_r+0x1e>
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	bd38      	pop	{r3, r4, r5, pc}
 8003c18:	200002cc 	.word	0x200002cc

08003c1c <_read_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4d07      	ldr	r5, [pc, #28]	@ (8003c3c <_read_r+0x20>)
 8003c20:	4604      	mov	r4, r0
 8003c22:	4608      	mov	r0, r1
 8003c24:	4611      	mov	r1, r2
 8003c26:	2200      	movs	r2, #0
 8003c28:	602a      	str	r2, [r5, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f7fd f8db 	bl	8000de6 <_read>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_read_r+0x1e>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_read_r+0x1e>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	200002cc 	.word	0x200002cc

08003c40 <_write_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	4d07      	ldr	r5, [pc, #28]	@ (8003c60 <_write_r+0x20>)
 8003c44:	4604      	mov	r4, r0
 8003c46:	4608      	mov	r0, r1
 8003c48:	4611      	mov	r1, r2
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	602a      	str	r2, [r5, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f7fd f8e6 	bl	8000e20 <_write>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_write_r+0x1e>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_write_r+0x1e>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	200002cc 	.word	0x200002cc

08003c64 <__errno>:
 8003c64:	4b01      	ldr	r3, [pc, #4]	@ (8003c6c <__errno+0x8>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000018 	.word	0x20000018

08003c70 <__libc_init_array>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	4d0d      	ldr	r5, [pc, #52]	@ (8003ca8 <__libc_init_array+0x38>)
 8003c74:	4c0d      	ldr	r4, [pc, #52]	@ (8003cac <__libc_init_array+0x3c>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	42a6      	cmp	r6, r4
 8003c7e:	d109      	bne.n	8003c94 <__libc_init_array+0x24>
 8003c80:	4d0b      	ldr	r5, [pc, #44]	@ (8003cb0 <__libc_init_array+0x40>)
 8003c82:	4c0c      	ldr	r4, [pc, #48]	@ (8003cb4 <__libc_init_array+0x44>)
 8003c84:	f000 fff0 	bl	8004c68 <_init>
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	42a6      	cmp	r6, r4
 8003c90:	d105      	bne.n	8003c9e <__libc_init_array+0x2e>
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c98:	4798      	blx	r3
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	e7ee      	b.n	8003c7c <__libc_init_array+0xc>
 8003c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca2:	4798      	blx	r3
 8003ca4:	3601      	adds	r6, #1
 8003ca6:	e7f2      	b.n	8003c8e <__libc_init_array+0x1e>
 8003ca8:	08004d9c 	.word	0x08004d9c
 8003cac:	08004d9c 	.word	0x08004d9c
 8003cb0:	08004d9c 	.word	0x08004d9c
 8003cb4:	08004da0 	.word	0x08004da0

08003cb8 <__retarget_lock_init_recursive>:
 8003cb8:	4770      	bx	lr

08003cba <__retarget_lock_acquire_recursive>:
 8003cba:	4770      	bx	lr

08003cbc <__retarget_lock_release_recursive>:
 8003cbc:	4770      	bx	lr
	...

08003cc0 <__assert_func>:
 8003cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cc2:	4614      	mov	r4, r2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <__assert_func+0x2c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4605      	mov	r5, r0
 8003ccc:	68d8      	ldr	r0, [r3, #12]
 8003cce:	b954      	cbnz	r4, 8003ce6 <__assert_func+0x26>
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <__assert_func+0x30>)
 8003cd2:	461c      	mov	r4, r3
 8003cd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003cd8:	9100      	str	r1, [sp, #0]
 8003cda:	462b      	mov	r3, r5
 8003cdc:	4905      	ldr	r1, [pc, #20]	@ (8003cf4 <__assert_func+0x34>)
 8003cde:	f000 fc9f 	bl	8004620 <fiprintf>
 8003ce2:	f000 fce7 	bl	80046b4 <abort>
 8003ce6:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <__assert_func+0x38>)
 8003ce8:	e7f4      	b.n	8003cd4 <__assert_func+0x14>
 8003cea:	bf00      	nop
 8003cec:	20000018 	.word	0x20000018
 8003cf0:	08004d5e 	.word	0x08004d5e
 8003cf4:	08004d30 	.word	0x08004d30
 8003cf8:	08004d23 	.word	0x08004d23

08003cfc <_free_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4605      	mov	r5, r0
 8003d00:	2900      	cmp	r1, #0
 8003d02:	d041      	beq.n	8003d88 <_free_r+0x8c>
 8003d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d08:	1f0c      	subs	r4, r1, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bfb8      	it	lt
 8003d0e:	18e4      	addlt	r4, r4, r3
 8003d10:	f000 f8e8 	bl	8003ee4 <__malloc_lock>
 8003d14:	4a1d      	ldr	r2, [pc, #116]	@ (8003d8c <_free_r+0x90>)
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	b933      	cbnz	r3, 8003d28 <_free_r+0x2c>
 8003d1a:	6063      	str	r3, [r4, #4]
 8003d1c:	6014      	str	r4, [r2, #0]
 8003d1e:	4628      	mov	r0, r5
 8003d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d24:	f000 b8e4 	b.w	8003ef0 <__malloc_unlock>
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	d908      	bls.n	8003d3e <_free_r+0x42>
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	1821      	adds	r1, r4, r0
 8003d30:	428b      	cmp	r3, r1
 8003d32:	bf01      	itttt	eq
 8003d34:	6819      	ldreq	r1, [r3, #0]
 8003d36:	685b      	ldreq	r3, [r3, #4]
 8003d38:	1809      	addeq	r1, r1, r0
 8003d3a:	6021      	streq	r1, [r4, #0]
 8003d3c:	e7ed      	b.n	8003d1a <_free_r+0x1e>
 8003d3e:	461a      	mov	r2, r3
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b10b      	cbz	r3, 8003d48 <_free_r+0x4c>
 8003d44:	42a3      	cmp	r3, r4
 8003d46:	d9fa      	bls.n	8003d3e <_free_r+0x42>
 8003d48:	6811      	ldr	r1, [r2, #0]
 8003d4a:	1850      	adds	r0, r2, r1
 8003d4c:	42a0      	cmp	r0, r4
 8003d4e:	d10b      	bne.n	8003d68 <_free_r+0x6c>
 8003d50:	6820      	ldr	r0, [r4, #0]
 8003d52:	4401      	add	r1, r0
 8003d54:	1850      	adds	r0, r2, r1
 8003d56:	4283      	cmp	r3, r0
 8003d58:	6011      	str	r1, [r2, #0]
 8003d5a:	d1e0      	bne.n	8003d1e <_free_r+0x22>
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	6053      	str	r3, [r2, #4]
 8003d62:	4408      	add	r0, r1
 8003d64:	6010      	str	r0, [r2, #0]
 8003d66:	e7da      	b.n	8003d1e <_free_r+0x22>
 8003d68:	d902      	bls.n	8003d70 <_free_r+0x74>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	602b      	str	r3, [r5, #0]
 8003d6e:	e7d6      	b.n	8003d1e <_free_r+0x22>
 8003d70:	6820      	ldr	r0, [r4, #0]
 8003d72:	1821      	adds	r1, r4, r0
 8003d74:	428b      	cmp	r3, r1
 8003d76:	bf04      	itt	eq
 8003d78:	6819      	ldreq	r1, [r3, #0]
 8003d7a:	685b      	ldreq	r3, [r3, #4]
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	bf04      	itt	eq
 8003d80:	1809      	addeq	r1, r1, r0
 8003d82:	6021      	streq	r1, [r4, #0]
 8003d84:	6054      	str	r4, [r2, #4]
 8003d86:	e7ca      	b.n	8003d1e <_free_r+0x22>
 8003d88:	bd38      	pop	{r3, r4, r5, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200002d8 	.word	0x200002d8

08003d90 <malloc>:
 8003d90:	4b02      	ldr	r3, [pc, #8]	@ (8003d9c <malloc+0xc>)
 8003d92:	4601      	mov	r1, r0
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	f000 b825 	b.w	8003de4 <_malloc_r>
 8003d9a:	bf00      	nop
 8003d9c:	20000018 	.word	0x20000018

08003da0 <sbrk_aligned>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	4e0f      	ldr	r6, [pc, #60]	@ (8003de0 <sbrk_aligned+0x40>)
 8003da4:	460c      	mov	r4, r1
 8003da6:	6831      	ldr	r1, [r6, #0]
 8003da8:	4605      	mov	r5, r0
 8003daa:	b911      	cbnz	r1, 8003db2 <sbrk_aligned+0x12>
 8003dac:	f000 fc64 	bl	8004678 <_sbrk_r>
 8003db0:	6030      	str	r0, [r6, #0]
 8003db2:	4621      	mov	r1, r4
 8003db4:	4628      	mov	r0, r5
 8003db6:	f000 fc5f 	bl	8004678 <_sbrk_r>
 8003dba:	1c43      	adds	r3, r0, #1
 8003dbc:	d103      	bne.n	8003dc6 <sbrk_aligned+0x26>
 8003dbe:	f04f 34ff 	mov.w	r4, #4294967295
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	1cc4      	adds	r4, r0, #3
 8003dc8:	f024 0403 	bic.w	r4, r4, #3
 8003dcc:	42a0      	cmp	r0, r4
 8003dce:	d0f8      	beq.n	8003dc2 <sbrk_aligned+0x22>
 8003dd0:	1a21      	subs	r1, r4, r0
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 fc50 	bl	8004678 <_sbrk_r>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d1f2      	bne.n	8003dc2 <sbrk_aligned+0x22>
 8003ddc:	e7ef      	b.n	8003dbe <sbrk_aligned+0x1e>
 8003dde:	bf00      	nop
 8003de0:	200002d4 	.word	0x200002d4

08003de4 <_malloc_r>:
 8003de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de8:	1ccd      	adds	r5, r1, #3
 8003dea:	f025 0503 	bic.w	r5, r5, #3
 8003dee:	3508      	adds	r5, #8
 8003df0:	2d0c      	cmp	r5, #12
 8003df2:	bf38      	it	cc
 8003df4:	250c      	movcc	r5, #12
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	4606      	mov	r6, r0
 8003dfa:	db01      	blt.n	8003e00 <_malloc_r+0x1c>
 8003dfc:	42a9      	cmp	r1, r5
 8003dfe:	d904      	bls.n	8003e0a <_malloc_r+0x26>
 8003e00:	230c      	movs	r3, #12
 8003e02:	6033      	str	r3, [r6, #0]
 8003e04:	2000      	movs	r0, #0
 8003e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ee0 <_malloc_r+0xfc>
 8003e0e:	f000 f869 	bl	8003ee4 <__malloc_lock>
 8003e12:	f8d8 3000 	ldr.w	r3, [r8]
 8003e16:	461c      	mov	r4, r3
 8003e18:	bb44      	cbnz	r4, 8003e6c <_malloc_r+0x88>
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7ff ffbf 	bl	8003da0 <sbrk_aligned>
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	4604      	mov	r4, r0
 8003e26:	d158      	bne.n	8003eda <_malloc_r+0xf6>
 8003e28:	f8d8 4000 	ldr.w	r4, [r8]
 8003e2c:	4627      	mov	r7, r4
 8003e2e:	2f00      	cmp	r7, #0
 8003e30:	d143      	bne.n	8003eba <_malloc_r+0xd6>
 8003e32:	2c00      	cmp	r4, #0
 8003e34:	d04b      	beq.n	8003ece <_malloc_r+0xea>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	4639      	mov	r1, r7
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	eb04 0903 	add.w	r9, r4, r3
 8003e40:	f000 fc1a 	bl	8004678 <_sbrk_r>
 8003e44:	4581      	cmp	r9, r0
 8003e46:	d142      	bne.n	8003ece <_malloc_r+0xea>
 8003e48:	6821      	ldr	r1, [r4, #0]
 8003e4a:	1a6d      	subs	r5, r5, r1
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4630      	mov	r0, r6
 8003e50:	f7ff ffa6 	bl	8003da0 <sbrk_aligned>
 8003e54:	3001      	adds	r0, #1
 8003e56:	d03a      	beq.n	8003ece <_malloc_r+0xea>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	442b      	add	r3, r5
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	bb62      	cbnz	r2, 8003ec0 <_malloc_r+0xdc>
 8003e66:	f8c8 7000 	str.w	r7, [r8]
 8003e6a:	e00f      	b.n	8003e8c <_malloc_r+0xa8>
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	1b52      	subs	r2, r2, r5
 8003e70:	d420      	bmi.n	8003eb4 <_malloc_r+0xd0>
 8003e72:	2a0b      	cmp	r2, #11
 8003e74:	d917      	bls.n	8003ea6 <_malloc_r+0xc2>
 8003e76:	1961      	adds	r1, r4, r5
 8003e78:	42a3      	cmp	r3, r4
 8003e7a:	6025      	str	r5, [r4, #0]
 8003e7c:	bf18      	it	ne
 8003e7e:	6059      	strne	r1, [r3, #4]
 8003e80:	6863      	ldr	r3, [r4, #4]
 8003e82:	bf08      	it	eq
 8003e84:	f8c8 1000 	streq.w	r1, [r8]
 8003e88:	5162      	str	r2, [r4, r5]
 8003e8a:	604b      	str	r3, [r1, #4]
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f000 f82f 	bl	8003ef0 <__malloc_unlock>
 8003e92:	f104 000b 	add.w	r0, r4, #11
 8003e96:	1d23      	adds	r3, r4, #4
 8003e98:	f020 0007 	bic.w	r0, r0, #7
 8003e9c:	1ac2      	subs	r2, r0, r3
 8003e9e:	bf1c      	itt	ne
 8003ea0:	1a1b      	subne	r3, r3, r0
 8003ea2:	50a3      	strne	r3, [r4, r2]
 8003ea4:	e7af      	b.n	8003e06 <_malloc_r+0x22>
 8003ea6:	6862      	ldr	r2, [r4, #4]
 8003ea8:	42a3      	cmp	r3, r4
 8003eaa:	bf0c      	ite	eq
 8003eac:	f8c8 2000 	streq.w	r2, [r8]
 8003eb0:	605a      	strne	r2, [r3, #4]
 8003eb2:	e7eb      	b.n	8003e8c <_malloc_r+0xa8>
 8003eb4:	4623      	mov	r3, r4
 8003eb6:	6864      	ldr	r4, [r4, #4]
 8003eb8:	e7ae      	b.n	8003e18 <_malloc_r+0x34>
 8003eba:	463c      	mov	r4, r7
 8003ebc:	687f      	ldr	r7, [r7, #4]
 8003ebe:	e7b6      	b.n	8003e2e <_malloc_r+0x4a>
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	d1fb      	bne.n	8003ec0 <_malloc_r+0xdc>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6053      	str	r3, [r2, #4]
 8003ecc:	e7de      	b.n	8003e8c <_malloc_r+0xa8>
 8003ece:	230c      	movs	r3, #12
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f000 f80c 	bl	8003ef0 <__malloc_unlock>
 8003ed8:	e794      	b.n	8003e04 <_malloc_r+0x20>
 8003eda:	6005      	str	r5, [r0, #0]
 8003edc:	e7d6      	b.n	8003e8c <_malloc_r+0xa8>
 8003ede:	bf00      	nop
 8003ee0:	200002d8 	.word	0x200002d8

08003ee4 <__malloc_lock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	@ (8003eec <__malloc_lock+0x8>)
 8003ee6:	f7ff bee8 	b.w	8003cba <__retarget_lock_acquire_recursive>
 8003eea:	bf00      	nop
 8003eec:	200002d0 	.word	0x200002d0

08003ef0 <__malloc_unlock>:
 8003ef0:	4801      	ldr	r0, [pc, #4]	@ (8003ef8 <__malloc_unlock+0x8>)
 8003ef2:	f7ff bee3 	b.w	8003cbc <__retarget_lock_release_recursive>
 8003ef6:	bf00      	nop
 8003ef8:	200002d0 	.word	0x200002d0

08003efc <__ssputs_r>:
 8003efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	688e      	ldr	r6, [r1, #8]
 8003f02:	461f      	mov	r7, r3
 8003f04:	42be      	cmp	r6, r7
 8003f06:	680b      	ldr	r3, [r1, #0]
 8003f08:	4682      	mov	sl, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	4690      	mov	r8, r2
 8003f0e:	d82d      	bhi.n	8003f6c <__ssputs_r+0x70>
 8003f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f18:	d026      	beq.n	8003f68 <__ssputs_r+0x6c>
 8003f1a:	6965      	ldr	r5, [r4, #20]
 8003f1c:	6909      	ldr	r1, [r1, #16]
 8003f1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f22:	eba3 0901 	sub.w	r9, r3, r1
 8003f26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f2a:	1c7b      	adds	r3, r7, #1
 8003f2c:	444b      	add	r3, r9
 8003f2e:	106d      	asrs	r5, r5, #1
 8003f30:	429d      	cmp	r5, r3
 8003f32:	bf38      	it	cc
 8003f34:	461d      	movcc	r5, r3
 8003f36:	0553      	lsls	r3, r2, #21
 8003f38:	d527      	bpl.n	8003f8a <__ssputs_r+0x8e>
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7ff ff52 	bl	8003de4 <_malloc_r>
 8003f40:	4606      	mov	r6, r0
 8003f42:	b360      	cbz	r0, 8003f9e <__ssputs_r+0xa2>
 8003f44:	6921      	ldr	r1, [r4, #16]
 8003f46:	464a      	mov	r2, r9
 8003f48:	f000 fba6 	bl	8004698 <memcpy>
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	6126      	str	r6, [r4, #16]
 8003f5a:	6165      	str	r5, [r4, #20]
 8003f5c:	444e      	add	r6, r9
 8003f5e:	eba5 0509 	sub.w	r5, r5, r9
 8003f62:	6026      	str	r6, [r4, #0]
 8003f64:	60a5      	str	r5, [r4, #8]
 8003f66:	463e      	mov	r6, r7
 8003f68:	42be      	cmp	r6, r7
 8003f6a:	d900      	bls.n	8003f6e <__ssputs_r+0x72>
 8003f6c:	463e      	mov	r6, r7
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	4632      	mov	r2, r6
 8003f72:	4641      	mov	r1, r8
 8003f74:	f000 fb66 	bl	8004644 <memmove>
 8003f78:	68a3      	ldr	r3, [r4, #8]
 8003f7a:	1b9b      	subs	r3, r3, r6
 8003f7c:	60a3      	str	r3, [r4, #8]
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	4433      	add	r3, r6
 8003f82:	6023      	str	r3, [r4, #0]
 8003f84:	2000      	movs	r0, #0
 8003f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8a:	462a      	mov	r2, r5
 8003f8c:	f000 fb99 	bl	80046c2 <_realloc_r>
 8003f90:	4606      	mov	r6, r0
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d1e0      	bne.n	8003f58 <__ssputs_r+0x5c>
 8003f96:	6921      	ldr	r1, [r4, #16]
 8003f98:	4650      	mov	r0, sl
 8003f9a:	f7ff feaf 	bl	8003cfc <_free_r>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	f8ca 3000 	str.w	r3, [sl]
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003faa:	81a3      	strh	r3, [r4, #12]
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	e7e9      	b.n	8003f86 <__ssputs_r+0x8a>
	...

08003fb4 <_svfiprintf_r>:
 8003fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	4698      	mov	r8, r3
 8003fba:	898b      	ldrh	r3, [r1, #12]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	b09d      	sub	sp, #116	@ 0x74
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	d510      	bpl.n	8003fea <_svfiprintf_r+0x36>
 8003fc8:	690b      	ldr	r3, [r1, #16]
 8003fca:	b973      	cbnz	r3, 8003fea <_svfiprintf_r+0x36>
 8003fcc:	2140      	movs	r1, #64	@ 0x40
 8003fce:	f7ff ff09 	bl	8003de4 <_malloc_r>
 8003fd2:	6028      	str	r0, [r5, #0]
 8003fd4:	6128      	str	r0, [r5, #16]
 8003fd6:	b930      	cbnz	r0, 8003fe6 <_svfiprintf_r+0x32>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	b01d      	add	sp, #116	@ 0x74
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe6:	2340      	movs	r3, #64	@ 0x40
 8003fe8:	616b      	str	r3, [r5, #20]
 8003fea:	2300      	movs	r3, #0
 8003fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fee:	2320      	movs	r3, #32
 8003ff0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ff8:	2330      	movs	r3, #48	@ 0x30
 8003ffa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004198 <_svfiprintf_r+0x1e4>
 8003ffe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004002:	f04f 0901 	mov.w	r9, #1
 8004006:	4623      	mov	r3, r4
 8004008:	469a      	mov	sl, r3
 800400a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400e:	b10a      	cbz	r2, 8004014 <_svfiprintf_r+0x60>
 8004010:	2a25      	cmp	r2, #37	@ 0x25
 8004012:	d1f9      	bne.n	8004008 <_svfiprintf_r+0x54>
 8004014:	ebba 0b04 	subs.w	fp, sl, r4
 8004018:	d00b      	beq.n	8004032 <_svfiprintf_r+0x7e>
 800401a:	465b      	mov	r3, fp
 800401c:	4622      	mov	r2, r4
 800401e:	4629      	mov	r1, r5
 8004020:	4638      	mov	r0, r7
 8004022:	f7ff ff6b 	bl	8003efc <__ssputs_r>
 8004026:	3001      	adds	r0, #1
 8004028:	f000 80a7 	beq.w	800417a <_svfiprintf_r+0x1c6>
 800402c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800402e:	445a      	add	r2, fp
 8004030:	9209      	str	r2, [sp, #36]	@ 0x24
 8004032:	f89a 3000 	ldrb.w	r3, [sl]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 809f 	beq.w	800417a <_svfiprintf_r+0x1c6>
 800403c:	2300      	movs	r3, #0
 800403e:	f04f 32ff 	mov.w	r2, #4294967295
 8004042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004046:	f10a 0a01 	add.w	sl, sl, #1
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	9307      	str	r3, [sp, #28]
 800404e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004052:	931a      	str	r3, [sp, #104]	@ 0x68
 8004054:	4654      	mov	r4, sl
 8004056:	2205      	movs	r2, #5
 8004058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405c:	484e      	ldr	r0, [pc, #312]	@ (8004198 <_svfiprintf_r+0x1e4>)
 800405e:	f7fc f8ef 	bl	8000240 <memchr>
 8004062:	9a04      	ldr	r2, [sp, #16]
 8004064:	b9d8      	cbnz	r0, 800409e <_svfiprintf_r+0xea>
 8004066:	06d0      	lsls	r0, r2, #27
 8004068:	bf44      	itt	mi
 800406a:	2320      	movmi	r3, #32
 800406c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004070:	0711      	lsls	r1, r2, #28
 8004072:	bf44      	itt	mi
 8004074:	232b      	movmi	r3, #43	@ 0x2b
 8004076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800407a:	f89a 3000 	ldrb.w	r3, [sl]
 800407e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004080:	d015      	beq.n	80040ae <_svfiprintf_r+0xfa>
 8004082:	9a07      	ldr	r2, [sp, #28]
 8004084:	4654      	mov	r4, sl
 8004086:	2000      	movs	r0, #0
 8004088:	f04f 0c0a 	mov.w	ip, #10
 800408c:	4621      	mov	r1, r4
 800408e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004092:	3b30      	subs	r3, #48	@ 0x30
 8004094:	2b09      	cmp	r3, #9
 8004096:	d94b      	bls.n	8004130 <_svfiprintf_r+0x17c>
 8004098:	b1b0      	cbz	r0, 80040c8 <_svfiprintf_r+0x114>
 800409a:	9207      	str	r2, [sp, #28]
 800409c:	e014      	b.n	80040c8 <_svfiprintf_r+0x114>
 800409e:	eba0 0308 	sub.w	r3, r0, r8
 80040a2:	fa09 f303 	lsl.w	r3, r9, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	9304      	str	r3, [sp, #16]
 80040aa:	46a2      	mov	sl, r4
 80040ac:	e7d2      	b.n	8004054 <_svfiprintf_r+0xa0>
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	1d19      	adds	r1, r3, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	9103      	str	r1, [sp, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfbb      	ittet	lt
 80040ba:	425b      	neglt	r3, r3
 80040bc:	f042 0202 	orrlt.w	r2, r2, #2
 80040c0:	9307      	strge	r3, [sp, #28]
 80040c2:	9307      	strlt	r3, [sp, #28]
 80040c4:	bfb8      	it	lt
 80040c6:	9204      	strlt	r2, [sp, #16]
 80040c8:	7823      	ldrb	r3, [r4, #0]
 80040ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80040cc:	d10a      	bne.n	80040e4 <_svfiprintf_r+0x130>
 80040ce:	7863      	ldrb	r3, [r4, #1]
 80040d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80040d2:	d132      	bne.n	800413a <_svfiprintf_r+0x186>
 80040d4:	9b03      	ldr	r3, [sp, #12]
 80040d6:	1d1a      	adds	r2, r3, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	9203      	str	r2, [sp, #12]
 80040dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040e0:	3402      	adds	r4, #2
 80040e2:	9305      	str	r3, [sp, #20]
 80040e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041a8 <_svfiprintf_r+0x1f4>
 80040e8:	7821      	ldrb	r1, [r4, #0]
 80040ea:	2203      	movs	r2, #3
 80040ec:	4650      	mov	r0, sl
 80040ee:	f7fc f8a7 	bl	8000240 <memchr>
 80040f2:	b138      	cbz	r0, 8004104 <_svfiprintf_r+0x150>
 80040f4:	9b04      	ldr	r3, [sp, #16]
 80040f6:	eba0 000a 	sub.w	r0, r0, sl
 80040fa:	2240      	movs	r2, #64	@ 0x40
 80040fc:	4082      	lsls	r2, r0
 80040fe:	4313      	orrs	r3, r2
 8004100:	3401      	adds	r4, #1
 8004102:	9304      	str	r3, [sp, #16]
 8004104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004108:	4824      	ldr	r0, [pc, #144]	@ (800419c <_svfiprintf_r+0x1e8>)
 800410a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800410e:	2206      	movs	r2, #6
 8004110:	f7fc f896 	bl	8000240 <memchr>
 8004114:	2800      	cmp	r0, #0
 8004116:	d036      	beq.n	8004186 <_svfiprintf_r+0x1d2>
 8004118:	4b21      	ldr	r3, [pc, #132]	@ (80041a0 <_svfiprintf_r+0x1ec>)
 800411a:	bb1b      	cbnz	r3, 8004164 <_svfiprintf_r+0x1b0>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	3307      	adds	r3, #7
 8004120:	f023 0307 	bic.w	r3, r3, #7
 8004124:	3308      	adds	r3, #8
 8004126:	9303      	str	r3, [sp, #12]
 8004128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800412a:	4433      	add	r3, r6
 800412c:	9309      	str	r3, [sp, #36]	@ 0x24
 800412e:	e76a      	b.n	8004006 <_svfiprintf_r+0x52>
 8004130:	fb0c 3202 	mla	r2, ip, r2, r3
 8004134:	460c      	mov	r4, r1
 8004136:	2001      	movs	r0, #1
 8004138:	e7a8      	b.n	800408c <_svfiprintf_r+0xd8>
 800413a:	2300      	movs	r3, #0
 800413c:	3401      	adds	r4, #1
 800413e:	9305      	str	r3, [sp, #20]
 8004140:	4619      	mov	r1, r3
 8004142:	f04f 0c0a 	mov.w	ip, #10
 8004146:	4620      	mov	r0, r4
 8004148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800414c:	3a30      	subs	r2, #48	@ 0x30
 800414e:	2a09      	cmp	r2, #9
 8004150:	d903      	bls.n	800415a <_svfiprintf_r+0x1a6>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0c6      	beq.n	80040e4 <_svfiprintf_r+0x130>
 8004156:	9105      	str	r1, [sp, #20]
 8004158:	e7c4      	b.n	80040e4 <_svfiprintf_r+0x130>
 800415a:	fb0c 2101 	mla	r1, ip, r1, r2
 800415e:	4604      	mov	r4, r0
 8004160:	2301      	movs	r3, #1
 8004162:	e7f0      	b.n	8004146 <_svfiprintf_r+0x192>
 8004164:	ab03      	add	r3, sp, #12
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	462a      	mov	r2, r5
 800416a:	4b0e      	ldr	r3, [pc, #56]	@ (80041a4 <_svfiprintf_r+0x1f0>)
 800416c:	a904      	add	r1, sp, #16
 800416e:	4638      	mov	r0, r7
 8004170:	f3af 8000 	nop.w
 8004174:	1c42      	adds	r2, r0, #1
 8004176:	4606      	mov	r6, r0
 8004178:	d1d6      	bne.n	8004128 <_svfiprintf_r+0x174>
 800417a:	89ab      	ldrh	r3, [r5, #12]
 800417c:	065b      	lsls	r3, r3, #25
 800417e:	f53f af2d 	bmi.w	8003fdc <_svfiprintf_r+0x28>
 8004182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004184:	e72c      	b.n	8003fe0 <_svfiprintf_r+0x2c>
 8004186:	ab03      	add	r3, sp, #12
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	462a      	mov	r2, r5
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <_svfiprintf_r+0x1f0>)
 800418e:	a904      	add	r1, sp, #16
 8004190:	4638      	mov	r0, r7
 8004192:	f000 f879 	bl	8004288 <_printf_i>
 8004196:	e7ed      	b.n	8004174 <_svfiprintf_r+0x1c0>
 8004198:	08004d5f 	.word	0x08004d5f
 800419c:	08004d69 	.word	0x08004d69
 80041a0:	00000000 	.word	0x00000000
 80041a4:	08003efd 	.word	0x08003efd
 80041a8:	08004d65 	.word	0x08004d65

080041ac <_printf_common>:
 80041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b0:	4616      	mov	r6, r2
 80041b2:	4698      	mov	r8, r3
 80041b4:	688a      	ldr	r2, [r1, #8]
 80041b6:	690b      	ldr	r3, [r1, #16]
 80041b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041bc:	4293      	cmp	r3, r2
 80041be:	bfb8      	it	lt
 80041c0:	4613      	movlt	r3, r2
 80041c2:	6033      	str	r3, [r6, #0]
 80041c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041c8:	4607      	mov	r7, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	b10a      	cbz	r2, 80041d2 <_printf_common+0x26>
 80041ce:	3301      	adds	r3, #1
 80041d0:	6033      	str	r3, [r6, #0]
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	0699      	lsls	r1, r3, #26
 80041d6:	bf42      	ittt	mi
 80041d8:	6833      	ldrmi	r3, [r6, #0]
 80041da:	3302      	addmi	r3, #2
 80041dc:	6033      	strmi	r3, [r6, #0]
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	f015 0506 	ands.w	r5, r5, #6
 80041e4:	d106      	bne.n	80041f4 <_printf_common+0x48>
 80041e6:	f104 0a19 	add.w	sl, r4, #25
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	6832      	ldr	r2, [r6, #0]
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	dc26      	bgt.n	8004242 <_printf_common+0x96>
 80041f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	3b00      	subs	r3, #0
 80041fc:	bf18      	it	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	0692      	lsls	r2, r2, #26
 8004202:	d42b      	bmi.n	800425c <_printf_common+0xb0>
 8004204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004208:	4641      	mov	r1, r8
 800420a:	4638      	mov	r0, r7
 800420c:	47c8      	blx	r9
 800420e:	3001      	adds	r0, #1
 8004210:	d01e      	beq.n	8004250 <_printf_common+0xa4>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	6922      	ldr	r2, [r4, #16]
 8004216:	f003 0306 	and.w	r3, r3, #6
 800421a:	2b04      	cmp	r3, #4
 800421c:	bf02      	ittt	eq
 800421e:	68e5      	ldreq	r5, [r4, #12]
 8004220:	6833      	ldreq	r3, [r6, #0]
 8004222:	1aed      	subeq	r5, r5, r3
 8004224:	68a3      	ldr	r3, [r4, #8]
 8004226:	bf0c      	ite	eq
 8004228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800422c:	2500      	movne	r5, #0
 800422e:	4293      	cmp	r3, r2
 8004230:	bfc4      	itt	gt
 8004232:	1a9b      	subgt	r3, r3, r2
 8004234:	18ed      	addgt	r5, r5, r3
 8004236:	2600      	movs	r6, #0
 8004238:	341a      	adds	r4, #26
 800423a:	42b5      	cmp	r5, r6
 800423c:	d11a      	bne.n	8004274 <_printf_common+0xc8>
 800423e:	2000      	movs	r0, #0
 8004240:	e008      	b.n	8004254 <_printf_common+0xa8>
 8004242:	2301      	movs	r3, #1
 8004244:	4652      	mov	r2, sl
 8004246:	4641      	mov	r1, r8
 8004248:	4638      	mov	r0, r7
 800424a:	47c8      	blx	r9
 800424c:	3001      	adds	r0, #1
 800424e:	d103      	bne.n	8004258 <_printf_common+0xac>
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004258:	3501      	adds	r5, #1
 800425a:	e7c6      	b.n	80041ea <_printf_common+0x3e>
 800425c:	18e1      	adds	r1, r4, r3
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	2030      	movs	r0, #48	@ 0x30
 8004262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004266:	4422      	add	r2, r4
 8004268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800426c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004270:	3302      	adds	r3, #2
 8004272:	e7c7      	b.n	8004204 <_printf_common+0x58>
 8004274:	2301      	movs	r3, #1
 8004276:	4622      	mov	r2, r4
 8004278:	4641      	mov	r1, r8
 800427a:	4638      	mov	r0, r7
 800427c:	47c8      	blx	r9
 800427e:	3001      	adds	r0, #1
 8004280:	d0e6      	beq.n	8004250 <_printf_common+0xa4>
 8004282:	3601      	adds	r6, #1
 8004284:	e7d9      	b.n	800423a <_printf_common+0x8e>
	...

08004288 <_printf_i>:
 8004288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	7e0f      	ldrb	r7, [r1, #24]
 800428e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004290:	2f78      	cmp	r7, #120	@ 0x78
 8004292:	4691      	mov	r9, r2
 8004294:	4680      	mov	r8, r0
 8004296:	460c      	mov	r4, r1
 8004298:	469a      	mov	sl, r3
 800429a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800429e:	d807      	bhi.n	80042b0 <_printf_i+0x28>
 80042a0:	2f62      	cmp	r7, #98	@ 0x62
 80042a2:	d80a      	bhi.n	80042ba <_printf_i+0x32>
 80042a4:	2f00      	cmp	r7, #0
 80042a6:	f000 80d2 	beq.w	800444e <_printf_i+0x1c6>
 80042aa:	2f58      	cmp	r7, #88	@ 0x58
 80042ac:	f000 80b9 	beq.w	8004422 <_printf_i+0x19a>
 80042b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042b8:	e03a      	b.n	8004330 <_printf_i+0xa8>
 80042ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042be:	2b15      	cmp	r3, #21
 80042c0:	d8f6      	bhi.n	80042b0 <_printf_i+0x28>
 80042c2:	a101      	add	r1, pc, #4	@ (adr r1, 80042c8 <_printf_i+0x40>)
 80042c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004335 	.word	0x08004335
 80042d0:	080042b1 	.word	0x080042b1
 80042d4:	080042b1 	.word	0x080042b1
 80042d8:	080042b1 	.word	0x080042b1
 80042dc:	080042b1 	.word	0x080042b1
 80042e0:	08004335 	.word	0x08004335
 80042e4:	080042b1 	.word	0x080042b1
 80042e8:	080042b1 	.word	0x080042b1
 80042ec:	080042b1 	.word	0x080042b1
 80042f0:	080042b1 	.word	0x080042b1
 80042f4:	08004435 	.word	0x08004435
 80042f8:	0800435f 	.word	0x0800435f
 80042fc:	080043ef 	.word	0x080043ef
 8004300:	080042b1 	.word	0x080042b1
 8004304:	080042b1 	.word	0x080042b1
 8004308:	08004457 	.word	0x08004457
 800430c:	080042b1 	.word	0x080042b1
 8004310:	0800435f 	.word	0x0800435f
 8004314:	080042b1 	.word	0x080042b1
 8004318:	080042b1 	.word	0x080042b1
 800431c:	080043f7 	.word	0x080043f7
 8004320:	6833      	ldr	r3, [r6, #0]
 8004322:	1d1a      	adds	r2, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6032      	str	r2, [r6, #0]
 8004328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800432c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004330:	2301      	movs	r3, #1
 8004332:	e09d      	b.n	8004470 <_printf_i+0x1e8>
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	1d19      	adds	r1, r3, #4
 800433a:	6031      	str	r1, [r6, #0]
 800433c:	0606      	lsls	r6, r0, #24
 800433e:	d501      	bpl.n	8004344 <_printf_i+0xbc>
 8004340:	681d      	ldr	r5, [r3, #0]
 8004342:	e003      	b.n	800434c <_printf_i+0xc4>
 8004344:	0645      	lsls	r5, r0, #25
 8004346:	d5fb      	bpl.n	8004340 <_printf_i+0xb8>
 8004348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800434c:	2d00      	cmp	r5, #0
 800434e:	da03      	bge.n	8004358 <_printf_i+0xd0>
 8004350:	232d      	movs	r3, #45	@ 0x2d
 8004352:	426d      	negs	r5, r5
 8004354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004358:	4859      	ldr	r0, [pc, #356]	@ (80044c0 <_printf_i+0x238>)
 800435a:	230a      	movs	r3, #10
 800435c:	e011      	b.n	8004382 <_printf_i+0xfa>
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	6833      	ldr	r3, [r6, #0]
 8004362:	0608      	lsls	r0, r1, #24
 8004364:	f853 5b04 	ldr.w	r5, [r3], #4
 8004368:	d402      	bmi.n	8004370 <_printf_i+0xe8>
 800436a:	0649      	lsls	r1, r1, #25
 800436c:	bf48      	it	mi
 800436e:	b2ad      	uxthmi	r5, r5
 8004370:	2f6f      	cmp	r7, #111	@ 0x6f
 8004372:	4853      	ldr	r0, [pc, #332]	@ (80044c0 <_printf_i+0x238>)
 8004374:	6033      	str	r3, [r6, #0]
 8004376:	bf14      	ite	ne
 8004378:	230a      	movne	r3, #10
 800437a:	2308      	moveq	r3, #8
 800437c:	2100      	movs	r1, #0
 800437e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004382:	6866      	ldr	r6, [r4, #4]
 8004384:	60a6      	str	r6, [r4, #8]
 8004386:	2e00      	cmp	r6, #0
 8004388:	bfa2      	ittt	ge
 800438a:	6821      	ldrge	r1, [r4, #0]
 800438c:	f021 0104 	bicge.w	r1, r1, #4
 8004390:	6021      	strge	r1, [r4, #0]
 8004392:	b90d      	cbnz	r5, 8004398 <_printf_i+0x110>
 8004394:	2e00      	cmp	r6, #0
 8004396:	d04b      	beq.n	8004430 <_printf_i+0x1a8>
 8004398:	4616      	mov	r6, r2
 800439a:	fbb5 f1f3 	udiv	r1, r5, r3
 800439e:	fb03 5711 	mls	r7, r3, r1, r5
 80043a2:	5dc7      	ldrb	r7, [r0, r7]
 80043a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043a8:	462f      	mov	r7, r5
 80043aa:	42bb      	cmp	r3, r7
 80043ac:	460d      	mov	r5, r1
 80043ae:	d9f4      	bls.n	800439a <_printf_i+0x112>
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d10b      	bne.n	80043cc <_printf_i+0x144>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	07df      	lsls	r7, r3, #31
 80043b8:	d508      	bpl.n	80043cc <_printf_i+0x144>
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	6861      	ldr	r1, [r4, #4]
 80043be:	4299      	cmp	r1, r3
 80043c0:	bfde      	ittt	le
 80043c2:	2330      	movle	r3, #48	@ 0x30
 80043c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043cc:	1b92      	subs	r2, r2, r6
 80043ce:	6122      	str	r2, [r4, #16]
 80043d0:	f8cd a000 	str.w	sl, [sp]
 80043d4:	464b      	mov	r3, r9
 80043d6:	aa03      	add	r2, sp, #12
 80043d8:	4621      	mov	r1, r4
 80043da:	4640      	mov	r0, r8
 80043dc:	f7ff fee6 	bl	80041ac <_printf_common>
 80043e0:	3001      	adds	r0, #1
 80043e2:	d14a      	bne.n	800447a <_printf_i+0x1f2>
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	b004      	add	sp, #16
 80043ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	f043 0320 	orr.w	r3, r3, #32
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	4833      	ldr	r0, [pc, #204]	@ (80044c4 <_printf_i+0x23c>)
 80043f8:	2778      	movs	r7, #120	@ 0x78
 80043fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	6831      	ldr	r1, [r6, #0]
 8004402:	061f      	lsls	r7, r3, #24
 8004404:	f851 5b04 	ldr.w	r5, [r1], #4
 8004408:	d402      	bmi.n	8004410 <_printf_i+0x188>
 800440a:	065f      	lsls	r7, r3, #25
 800440c:	bf48      	it	mi
 800440e:	b2ad      	uxthmi	r5, r5
 8004410:	6031      	str	r1, [r6, #0]
 8004412:	07d9      	lsls	r1, r3, #31
 8004414:	bf44      	itt	mi
 8004416:	f043 0320 	orrmi.w	r3, r3, #32
 800441a:	6023      	strmi	r3, [r4, #0]
 800441c:	b11d      	cbz	r5, 8004426 <_printf_i+0x19e>
 800441e:	2310      	movs	r3, #16
 8004420:	e7ac      	b.n	800437c <_printf_i+0xf4>
 8004422:	4827      	ldr	r0, [pc, #156]	@ (80044c0 <_printf_i+0x238>)
 8004424:	e7e9      	b.n	80043fa <_printf_i+0x172>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f023 0320 	bic.w	r3, r3, #32
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	e7f6      	b.n	800441e <_printf_i+0x196>
 8004430:	4616      	mov	r6, r2
 8004432:	e7bd      	b.n	80043b0 <_printf_i+0x128>
 8004434:	6833      	ldr	r3, [r6, #0]
 8004436:	6825      	ldr	r5, [r4, #0]
 8004438:	6961      	ldr	r1, [r4, #20]
 800443a:	1d18      	adds	r0, r3, #4
 800443c:	6030      	str	r0, [r6, #0]
 800443e:	062e      	lsls	r6, r5, #24
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	d501      	bpl.n	8004448 <_printf_i+0x1c0>
 8004444:	6019      	str	r1, [r3, #0]
 8004446:	e002      	b.n	800444e <_printf_i+0x1c6>
 8004448:	0668      	lsls	r0, r5, #25
 800444a:	d5fb      	bpl.n	8004444 <_printf_i+0x1bc>
 800444c:	8019      	strh	r1, [r3, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	6123      	str	r3, [r4, #16]
 8004452:	4616      	mov	r6, r2
 8004454:	e7bc      	b.n	80043d0 <_printf_i+0x148>
 8004456:	6833      	ldr	r3, [r6, #0]
 8004458:	1d1a      	adds	r2, r3, #4
 800445a:	6032      	str	r2, [r6, #0]
 800445c:	681e      	ldr	r6, [r3, #0]
 800445e:	6862      	ldr	r2, [r4, #4]
 8004460:	2100      	movs	r1, #0
 8004462:	4630      	mov	r0, r6
 8004464:	f7fb feec 	bl	8000240 <memchr>
 8004468:	b108      	cbz	r0, 800446e <_printf_i+0x1e6>
 800446a:	1b80      	subs	r0, r0, r6
 800446c:	6060      	str	r0, [r4, #4]
 800446e:	6863      	ldr	r3, [r4, #4]
 8004470:	6123      	str	r3, [r4, #16]
 8004472:	2300      	movs	r3, #0
 8004474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004478:	e7aa      	b.n	80043d0 <_printf_i+0x148>
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	4632      	mov	r2, r6
 800447e:	4649      	mov	r1, r9
 8004480:	4640      	mov	r0, r8
 8004482:	47d0      	blx	sl
 8004484:	3001      	adds	r0, #1
 8004486:	d0ad      	beq.n	80043e4 <_printf_i+0x15c>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	079b      	lsls	r3, r3, #30
 800448c:	d413      	bmi.n	80044b6 <_printf_i+0x22e>
 800448e:	68e0      	ldr	r0, [r4, #12]
 8004490:	9b03      	ldr	r3, [sp, #12]
 8004492:	4298      	cmp	r0, r3
 8004494:	bfb8      	it	lt
 8004496:	4618      	movlt	r0, r3
 8004498:	e7a6      	b.n	80043e8 <_printf_i+0x160>
 800449a:	2301      	movs	r3, #1
 800449c:	4632      	mov	r2, r6
 800449e:	4649      	mov	r1, r9
 80044a0:	4640      	mov	r0, r8
 80044a2:	47d0      	blx	sl
 80044a4:	3001      	adds	r0, #1
 80044a6:	d09d      	beq.n	80043e4 <_printf_i+0x15c>
 80044a8:	3501      	adds	r5, #1
 80044aa:	68e3      	ldr	r3, [r4, #12]
 80044ac:	9903      	ldr	r1, [sp, #12]
 80044ae:	1a5b      	subs	r3, r3, r1
 80044b0:	42ab      	cmp	r3, r5
 80044b2:	dcf2      	bgt.n	800449a <_printf_i+0x212>
 80044b4:	e7eb      	b.n	800448e <_printf_i+0x206>
 80044b6:	2500      	movs	r5, #0
 80044b8:	f104 0619 	add.w	r6, r4, #25
 80044bc:	e7f5      	b.n	80044aa <_printf_i+0x222>
 80044be:	bf00      	nop
 80044c0:	08004d70 	.word	0x08004d70
 80044c4:	08004d81 	.word	0x08004d81

080044c8 <__sflush_r>:
 80044c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d0:	0716      	lsls	r6, r2, #28
 80044d2:	4605      	mov	r5, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	d454      	bmi.n	8004582 <__sflush_r+0xba>
 80044d8:	684b      	ldr	r3, [r1, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	dc02      	bgt.n	80044e4 <__sflush_r+0x1c>
 80044de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	dd48      	ble.n	8004576 <__sflush_r+0xae>
 80044e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	d045      	beq.n	8004576 <__sflush_r+0xae>
 80044ea:	2300      	movs	r3, #0
 80044ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044f0:	682f      	ldr	r7, [r5, #0]
 80044f2:	6a21      	ldr	r1, [r4, #32]
 80044f4:	602b      	str	r3, [r5, #0]
 80044f6:	d030      	beq.n	800455a <__sflush_r+0x92>
 80044f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	0759      	lsls	r1, r3, #29
 80044fe:	d505      	bpl.n	800450c <__sflush_r+0x44>
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004506:	b10b      	cbz	r3, 800450c <__sflush_r+0x44>
 8004508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800450a:	1ad2      	subs	r2, r2, r3
 800450c:	2300      	movs	r3, #0
 800450e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004510:	6a21      	ldr	r1, [r4, #32]
 8004512:	4628      	mov	r0, r5
 8004514:	47b0      	blx	r6
 8004516:	1c43      	adds	r3, r0, #1
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	d106      	bne.n	800452a <__sflush_r+0x62>
 800451c:	6829      	ldr	r1, [r5, #0]
 800451e:	291d      	cmp	r1, #29
 8004520:	d82b      	bhi.n	800457a <__sflush_r+0xb2>
 8004522:	4a2a      	ldr	r2, [pc, #168]	@ (80045cc <__sflush_r+0x104>)
 8004524:	410a      	asrs	r2, r1
 8004526:	07d6      	lsls	r6, r2, #31
 8004528:	d427      	bmi.n	800457a <__sflush_r+0xb2>
 800452a:	2200      	movs	r2, #0
 800452c:	6062      	str	r2, [r4, #4]
 800452e:	04d9      	lsls	r1, r3, #19
 8004530:	6922      	ldr	r2, [r4, #16]
 8004532:	6022      	str	r2, [r4, #0]
 8004534:	d504      	bpl.n	8004540 <__sflush_r+0x78>
 8004536:	1c42      	adds	r2, r0, #1
 8004538:	d101      	bne.n	800453e <__sflush_r+0x76>
 800453a:	682b      	ldr	r3, [r5, #0]
 800453c:	b903      	cbnz	r3, 8004540 <__sflush_r+0x78>
 800453e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004542:	602f      	str	r7, [r5, #0]
 8004544:	b1b9      	cbz	r1, 8004576 <__sflush_r+0xae>
 8004546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800454a:	4299      	cmp	r1, r3
 800454c:	d002      	beq.n	8004554 <__sflush_r+0x8c>
 800454e:	4628      	mov	r0, r5
 8004550:	f7ff fbd4 	bl	8003cfc <_free_r>
 8004554:	2300      	movs	r3, #0
 8004556:	6363      	str	r3, [r4, #52]	@ 0x34
 8004558:	e00d      	b.n	8004576 <__sflush_r+0xae>
 800455a:	2301      	movs	r3, #1
 800455c:	4628      	mov	r0, r5
 800455e:	47b0      	blx	r6
 8004560:	4602      	mov	r2, r0
 8004562:	1c50      	adds	r0, r2, #1
 8004564:	d1c9      	bne.n	80044fa <__sflush_r+0x32>
 8004566:	682b      	ldr	r3, [r5, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0c6      	beq.n	80044fa <__sflush_r+0x32>
 800456c:	2b1d      	cmp	r3, #29
 800456e:	d001      	beq.n	8004574 <__sflush_r+0xac>
 8004570:	2b16      	cmp	r3, #22
 8004572:	d11e      	bne.n	80045b2 <__sflush_r+0xea>
 8004574:	602f      	str	r7, [r5, #0]
 8004576:	2000      	movs	r0, #0
 8004578:	e022      	b.n	80045c0 <__sflush_r+0xf8>
 800457a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800457e:	b21b      	sxth	r3, r3
 8004580:	e01b      	b.n	80045ba <__sflush_r+0xf2>
 8004582:	690f      	ldr	r7, [r1, #16]
 8004584:	2f00      	cmp	r7, #0
 8004586:	d0f6      	beq.n	8004576 <__sflush_r+0xae>
 8004588:	0793      	lsls	r3, r2, #30
 800458a:	680e      	ldr	r6, [r1, #0]
 800458c:	bf08      	it	eq
 800458e:	694b      	ldreq	r3, [r1, #20]
 8004590:	600f      	str	r7, [r1, #0]
 8004592:	bf18      	it	ne
 8004594:	2300      	movne	r3, #0
 8004596:	eba6 0807 	sub.w	r8, r6, r7
 800459a:	608b      	str	r3, [r1, #8]
 800459c:	f1b8 0f00 	cmp.w	r8, #0
 80045a0:	dde9      	ble.n	8004576 <__sflush_r+0xae>
 80045a2:	6a21      	ldr	r1, [r4, #32]
 80045a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80045a6:	4643      	mov	r3, r8
 80045a8:	463a      	mov	r2, r7
 80045aa:	4628      	mov	r0, r5
 80045ac:	47b0      	blx	r6
 80045ae:	2800      	cmp	r0, #0
 80045b0:	dc08      	bgt.n	80045c4 <__sflush_r+0xfc>
 80045b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c4:	4407      	add	r7, r0
 80045c6:	eba8 0800 	sub.w	r8, r8, r0
 80045ca:	e7e7      	b.n	800459c <__sflush_r+0xd4>
 80045cc:	dfbffffe 	.word	0xdfbffffe

080045d0 <_fflush_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	690b      	ldr	r3, [r1, #16]
 80045d4:	4605      	mov	r5, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	b913      	cbnz	r3, 80045e0 <_fflush_r+0x10>
 80045da:	2500      	movs	r5, #0
 80045dc:	4628      	mov	r0, r5
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	b118      	cbz	r0, 80045ea <_fflush_r+0x1a>
 80045e2:	6a03      	ldr	r3, [r0, #32]
 80045e4:	b90b      	cbnz	r3, 80045ea <_fflush_r+0x1a>
 80045e6:	f7ff fa55 	bl	8003a94 <__sinit>
 80045ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f3      	beq.n	80045da <_fflush_r+0xa>
 80045f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045f4:	07d0      	lsls	r0, r2, #31
 80045f6:	d404      	bmi.n	8004602 <_fflush_r+0x32>
 80045f8:	0599      	lsls	r1, r3, #22
 80045fa:	d402      	bmi.n	8004602 <_fflush_r+0x32>
 80045fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045fe:	f7ff fb5c 	bl	8003cba <__retarget_lock_acquire_recursive>
 8004602:	4628      	mov	r0, r5
 8004604:	4621      	mov	r1, r4
 8004606:	f7ff ff5f 	bl	80044c8 <__sflush_r>
 800460a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800460c:	07da      	lsls	r2, r3, #31
 800460e:	4605      	mov	r5, r0
 8004610:	d4e4      	bmi.n	80045dc <_fflush_r+0xc>
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	059b      	lsls	r3, r3, #22
 8004616:	d4e1      	bmi.n	80045dc <_fflush_r+0xc>
 8004618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800461a:	f7ff fb4f 	bl	8003cbc <__retarget_lock_release_recursive>
 800461e:	e7dd      	b.n	80045dc <_fflush_r+0xc>

08004620 <fiprintf>:
 8004620:	b40e      	push	{r1, r2, r3}
 8004622:	b503      	push	{r0, r1, lr}
 8004624:	4601      	mov	r1, r0
 8004626:	ab03      	add	r3, sp, #12
 8004628:	4805      	ldr	r0, [pc, #20]	@ (8004640 <fiprintf+0x20>)
 800462a:	f853 2b04 	ldr.w	r2, [r3], #4
 800462e:	6800      	ldr	r0, [r0, #0]
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	f000 f89d 	bl	8004770 <_vfiprintf_r>
 8004636:	b002      	add	sp, #8
 8004638:	f85d eb04 	ldr.w	lr, [sp], #4
 800463c:	b003      	add	sp, #12
 800463e:	4770      	bx	lr
 8004640:	20000018 	.word	0x20000018

08004644 <memmove>:
 8004644:	4288      	cmp	r0, r1
 8004646:	b510      	push	{r4, lr}
 8004648:	eb01 0402 	add.w	r4, r1, r2
 800464c:	d902      	bls.n	8004654 <memmove+0x10>
 800464e:	4284      	cmp	r4, r0
 8004650:	4623      	mov	r3, r4
 8004652:	d807      	bhi.n	8004664 <memmove+0x20>
 8004654:	1e43      	subs	r3, r0, #1
 8004656:	42a1      	cmp	r1, r4
 8004658:	d008      	beq.n	800466c <memmove+0x28>
 800465a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004662:	e7f8      	b.n	8004656 <memmove+0x12>
 8004664:	4402      	add	r2, r0
 8004666:	4601      	mov	r1, r0
 8004668:	428a      	cmp	r2, r1
 800466a:	d100      	bne.n	800466e <memmove+0x2a>
 800466c:	bd10      	pop	{r4, pc}
 800466e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004676:	e7f7      	b.n	8004668 <memmove+0x24>

08004678 <_sbrk_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4d06      	ldr	r5, [pc, #24]	@ (8004694 <_sbrk_r+0x1c>)
 800467c:	2300      	movs	r3, #0
 800467e:	4604      	mov	r4, r0
 8004680:	4608      	mov	r0, r1
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	f7fc fc1c 	bl	8000ec0 <_sbrk>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_sbrk_r+0x1a>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_sbrk_r+0x1a>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	200002cc 	.word	0x200002cc

08004698 <memcpy>:
 8004698:	440a      	add	r2, r1
 800469a:	4291      	cmp	r1, r2
 800469c:	f100 33ff 	add.w	r3, r0, #4294967295
 80046a0:	d100      	bne.n	80046a4 <memcpy+0xc>
 80046a2:	4770      	bx	lr
 80046a4:	b510      	push	{r4, lr}
 80046a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ae:	4291      	cmp	r1, r2
 80046b0:	d1f9      	bne.n	80046a6 <memcpy+0xe>
 80046b2:	bd10      	pop	{r4, pc}

080046b4 <abort>:
 80046b4:	b508      	push	{r3, lr}
 80046b6:	2006      	movs	r0, #6
 80046b8:	f000 fa2e 	bl	8004b18 <raise>
 80046bc:	2001      	movs	r0, #1
 80046be:	f7fc fb87 	bl	8000dd0 <_exit>

080046c2 <_realloc_r>:
 80046c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c6:	4680      	mov	r8, r0
 80046c8:	4615      	mov	r5, r2
 80046ca:	460c      	mov	r4, r1
 80046cc:	b921      	cbnz	r1, 80046d8 <_realloc_r+0x16>
 80046ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d2:	4611      	mov	r1, r2
 80046d4:	f7ff bb86 	b.w	8003de4 <_malloc_r>
 80046d8:	b92a      	cbnz	r2, 80046e6 <_realloc_r+0x24>
 80046da:	f7ff fb0f 	bl	8003cfc <_free_r>
 80046de:	2400      	movs	r4, #0
 80046e0:	4620      	mov	r0, r4
 80046e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e6:	f000 fa33 	bl	8004b50 <_malloc_usable_size_r>
 80046ea:	4285      	cmp	r5, r0
 80046ec:	4606      	mov	r6, r0
 80046ee:	d802      	bhi.n	80046f6 <_realloc_r+0x34>
 80046f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046f4:	d8f4      	bhi.n	80046e0 <_realloc_r+0x1e>
 80046f6:	4629      	mov	r1, r5
 80046f8:	4640      	mov	r0, r8
 80046fa:	f7ff fb73 	bl	8003de4 <_malloc_r>
 80046fe:	4607      	mov	r7, r0
 8004700:	2800      	cmp	r0, #0
 8004702:	d0ec      	beq.n	80046de <_realloc_r+0x1c>
 8004704:	42b5      	cmp	r5, r6
 8004706:	462a      	mov	r2, r5
 8004708:	4621      	mov	r1, r4
 800470a:	bf28      	it	cs
 800470c:	4632      	movcs	r2, r6
 800470e:	f7ff ffc3 	bl	8004698 <memcpy>
 8004712:	4621      	mov	r1, r4
 8004714:	4640      	mov	r0, r8
 8004716:	f7ff faf1 	bl	8003cfc <_free_r>
 800471a:	463c      	mov	r4, r7
 800471c:	e7e0      	b.n	80046e0 <_realloc_r+0x1e>

0800471e <__sfputc_r>:
 800471e:	6893      	ldr	r3, [r2, #8]
 8004720:	3b01      	subs	r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	b410      	push	{r4}
 8004726:	6093      	str	r3, [r2, #8]
 8004728:	da08      	bge.n	800473c <__sfputc_r+0x1e>
 800472a:	6994      	ldr	r4, [r2, #24]
 800472c:	42a3      	cmp	r3, r4
 800472e:	db01      	blt.n	8004734 <__sfputc_r+0x16>
 8004730:	290a      	cmp	r1, #10
 8004732:	d103      	bne.n	800473c <__sfputc_r+0x1e>
 8004734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004738:	f000 b932 	b.w	80049a0 <__swbuf_r>
 800473c:	6813      	ldr	r3, [r2, #0]
 800473e:	1c58      	adds	r0, r3, #1
 8004740:	6010      	str	r0, [r2, #0]
 8004742:	7019      	strb	r1, [r3, #0]
 8004744:	4608      	mov	r0, r1
 8004746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800474a:	4770      	bx	lr

0800474c <__sfputs_r>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	4606      	mov	r6, r0
 8004750:	460f      	mov	r7, r1
 8004752:	4614      	mov	r4, r2
 8004754:	18d5      	adds	r5, r2, r3
 8004756:	42ac      	cmp	r4, r5
 8004758:	d101      	bne.n	800475e <__sfputs_r+0x12>
 800475a:	2000      	movs	r0, #0
 800475c:	e007      	b.n	800476e <__sfputs_r+0x22>
 800475e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004762:	463a      	mov	r2, r7
 8004764:	4630      	mov	r0, r6
 8004766:	f7ff ffda 	bl	800471e <__sfputc_r>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	d1f3      	bne.n	8004756 <__sfputs_r+0xa>
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004770 <_vfiprintf_r>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	460d      	mov	r5, r1
 8004776:	b09d      	sub	sp, #116	@ 0x74
 8004778:	4614      	mov	r4, r2
 800477a:	4698      	mov	r8, r3
 800477c:	4606      	mov	r6, r0
 800477e:	b118      	cbz	r0, 8004788 <_vfiprintf_r+0x18>
 8004780:	6a03      	ldr	r3, [r0, #32]
 8004782:	b90b      	cbnz	r3, 8004788 <_vfiprintf_r+0x18>
 8004784:	f7ff f986 	bl	8003a94 <__sinit>
 8004788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800478a:	07d9      	lsls	r1, r3, #31
 800478c:	d405      	bmi.n	800479a <_vfiprintf_r+0x2a>
 800478e:	89ab      	ldrh	r3, [r5, #12]
 8004790:	059a      	lsls	r2, r3, #22
 8004792:	d402      	bmi.n	800479a <_vfiprintf_r+0x2a>
 8004794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004796:	f7ff fa90 	bl	8003cba <__retarget_lock_acquire_recursive>
 800479a:	89ab      	ldrh	r3, [r5, #12]
 800479c:	071b      	lsls	r3, r3, #28
 800479e:	d501      	bpl.n	80047a4 <_vfiprintf_r+0x34>
 80047a0:	692b      	ldr	r3, [r5, #16]
 80047a2:	b99b      	cbnz	r3, 80047cc <_vfiprintf_r+0x5c>
 80047a4:	4629      	mov	r1, r5
 80047a6:	4630      	mov	r0, r6
 80047a8:	f000 f938 	bl	8004a1c <__swsetup_r>
 80047ac:	b170      	cbz	r0, 80047cc <_vfiprintf_r+0x5c>
 80047ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047b0:	07dc      	lsls	r4, r3, #31
 80047b2:	d504      	bpl.n	80047be <_vfiprintf_r+0x4e>
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	b01d      	add	sp, #116	@ 0x74
 80047ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047be:	89ab      	ldrh	r3, [r5, #12]
 80047c0:	0598      	lsls	r0, r3, #22
 80047c2:	d4f7      	bmi.n	80047b4 <_vfiprintf_r+0x44>
 80047c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047c6:	f7ff fa79 	bl	8003cbc <__retarget_lock_release_recursive>
 80047ca:	e7f3      	b.n	80047b4 <_vfiprintf_r+0x44>
 80047cc:	2300      	movs	r3, #0
 80047ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80047d0:	2320      	movs	r3, #32
 80047d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80047da:	2330      	movs	r3, #48	@ 0x30
 80047dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800498c <_vfiprintf_r+0x21c>
 80047e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047e4:	f04f 0901 	mov.w	r9, #1
 80047e8:	4623      	mov	r3, r4
 80047ea:	469a      	mov	sl, r3
 80047ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047f0:	b10a      	cbz	r2, 80047f6 <_vfiprintf_r+0x86>
 80047f2:	2a25      	cmp	r2, #37	@ 0x25
 80047f4:	d1f9      	bne.n	80047ea <_vfiprintf_r+0x7a>
 80047f6:	ebba 0b04 	subs.w	fp, sl, r4
 80047fa:	d00b      	beq.n	8004814 <_vfiprintf_r+0xa4>
 80047fc:	465b      	mov	r3, fp
 80047fe:	4622      	mov	r2, r4
 8004800:	4629      	mov	r1, r5
 8004802:	4630      	mov	r0, r6
 8004804:	f7ff ffa2 	bl	800474c <__sfputs_r>
 8004808:	3001      	adds	r0, #1
 800480a:	f000 80a7 	beq.w	800495c <_vfiprintf_r+0x1ec>
 800480e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004810:	445a      	add	r2, fp
 8004812:	9209      	str	r2, [sp, #36]	@ 0x24
 8004814:	f89a 3000 	ldrb.w	r3, [sl]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 809f 	beq.w	800495c <_vfiprintf_r+0x1ec>
 800481e:	2300      	movs	r3, #0
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004828:	f10a 0a01 	add.w	sl, sl, #1
 800482c:	9304      	str	r3, [sp, #16]
 800482e:	9307      	str	r3, [sp, #28]
 8004830:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004834:	931a      	str	r3, [sp, #104]	@ 0x68
 8004836:	4654      	mov	r4, sl
 8004838:	2205      	movs	r2, #5
 800483a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483e:	4853      	ldr	r0, [pc, #332]	@ (800498c <_vfiprintf_r+0x21c>)
 8004840:	f7fb fcfe 	bl	8000240 <memchr>
 8004844:	9a04      	ldr	r2, [sp, #16]
 8004846:	b9d8      	cbnz	r0, 8004880 <_vfiprintf_r+0x110>
 8004848:	06d1      	lsls	r1, r2, #27
 800484a:	bf44      	itt	mi
 800484c:	2320      	movmi	r3, #32
 800484e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004852:	0713      	lsls	r3, r2, #28
 8004854:	bf44      	itt	mi
 8004856:	232b      	movmi	r3, #43	@ 0x2b
 8004858:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800485c:	f89a 3000 	ldrb.w	r3, [sl]
 8004860:	2b2a      	cmp	r3, #42	@ 0x2a
 8004862:	d015      	beq.n	8004890 <_vfiprintf_r+0x120>
 8004864:	9a07      	ldr	r2, [sp, #28]
 8004866:	4654      	mov	r4, sl
 8004868:	2000      	movs	r0, #0
 800486a:	f04f 0c0a 	mov.w	ip, #10
 800486e:	4621      	mov	r1, r4
 8004870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004874:	3b30      	subs	r3, #48	@ 0x30
 8004876:	2b09      	cmp	r3, #9
 8004878:	d94b      	bls.n	8004912 <_vfiprintf_r+0x1a2>
 800487a:	b1b0      	cbz	r0, 80048aa <_vfiprintf_r+0x13a>
 800487c:	9207      	str	r2, [sp, #28]
 800487e:	e014      	b.n	80048aa <_vfiprintf_r+0x13a>
 8004880:	eba0 0308 	sub.w	r3, r0, r8
 8004884:	fa09 f303 	lsl.w	r3, r9, r3
 8004888:	4313      	orrs	r3, r2
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	46a2      	mov	sl, r4
 800488e:	e7d2      	b.n	8004836 <_vfiprintf_r+0xc6>
 8004890:	9b03      	ldr	r3, [sp, #12]
 8004892:	1d19      	adds	r1, r3, #4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	9103      	str	r1, [sp, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	bfbb      	ittet	lt
 800489c:	425b      	neglt	r3, r3
 800489e:	f042 0202 	orrlt.w	r2, r2, #2
 80048a2:	9307      	strge	r3, [sp, #28]
 80048a4:	9307      	strlt	r3, [sp, #28]
 80048a6:	bfb8      	it	lt
 80048a8:	9204      	strlt	r2, [sp, #16]
 80048aa:	7823      	ldrb	r3, [r4, #0]
 80048ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80048ae:	d10a      	bne.n	80048c6 <_vfiprintf_r+0x156>
 80048b0:	7863      	ldrb	r3, [r4, #1]
 80048b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80048b4:	d132      	bne.n	800491c <_vfiprintf_r+0x1ac>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	1d1a      	adds	r2, r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	9203      	str	r2, [sp, #12]
 80048be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048c2:	3402      	adds	r4, #2
 80048c4:	9305      	str	r3, [sp, #20]
 80048c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800499c <_vfiprintf_r+0x22c>
 80048ca:	7821      	ldrb	r1, [r4, #0]
 80048cc:	2203      	movs	r2, #3
 80048ce:	4650      	mov	r0, sl
 80048d0:	f7fb fcb6 	bl	8000240 <memchr>
 80048d4:	b138      	cbz	r0, 80048e6 <_vfiprintf_r+0x176>
 80048d6:	9b04      	ldr	r3, [sp, #16]
 80048d8:	eba0 000a 	sub.w	r0, r0, sl
 80048dc:	2240      	movs	r2, #64	@ 0x40
 80048de:	4082      	lsls	r2, r0
 80048e0:	4313      	orrs	r3, r2
 80048e2:	3401      	adds	r4, #1
 80048e4:	9304      	str	r3, [sp, #16]
 80048e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ea:	4829      	ldr	r0, [pc, #164]	@ (8004990 <_vfiprintf_r+0x220>)
 80048ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048f0:	2206      	movs	r2, #6
 80048f2:	f7fb fca5 	bl	8000240 <memchr>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d03f      	beq.n	800497a <_vfiprintf_r+0x20a>
 80048fa:	4b26      	ldr	r3, [pc, #152]	@ (8004994 <_vfiprintf_r+0x224>)
 80048fc:	bb1b      	cbnz	r3, 8004946 <_vfiprintf_r+0x1d6>
 80048fe:	9b03      	ldr	r3, [sp, #12]
 8004900:	3307      	adds	r3, #7
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	3308      	adds	r3, #8
 8004908:	9303      	str	r3, [sp, #12]
 800490a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800490c:	443b      	add	r3, r7
 800490e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004910:	e76a      	b.n	80047e8 <_vfiprintf_r+0x78>
 8004912:	fb0c 3202 	mla	r2, ip, r2, r3
 8004916:	460c      	mov	r4, r1
 8004918:	2001      	movs	r0, #1
 800491a:	e7a8      	b.n	800486e <_vfiprintf_r+0xfe>
 800491c:	2300      	movs	r3, #0
 800491e:	3401      	adds	r4, #1
 8004920:	9305      	str	r3, [sp, #20]
 8004922:	4619      	mov	r1, r3
 8004924:	f04f 0c0a 	mov.w	ip, #10
 8004928:	4620      	mov	r0, r4
 800492a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800492e:	3a30      	subs	r2, #48	@ 0x30
 8004930:	2a09      	cmp	r2, #9
 8004932:	d903      	bls.n	800493c <_vfiprintf_r+0x1cc>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0c6      	beq.n	80048c6 <_vfiprintf_r+0x156>
 8004938:	9105      	str	r1, [sp, #20]
 800493a:	e7c4      	b.n	80048c6 <_vfiprintf_r+0x156>
 800493c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004940:	4604      	mov	r4, r0
 8004942:	2301      	movs	r3, #1
 8004944:	e7f0      	b.n	8004928 <_vfiprintf_r+0x1b8>
 8004946:	ab03      	add	r3, sp, #12
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	462a      	mov	r2, r5
 800494c:	4b12      	ldr	r3, [pc, #72]	@ (8004998 <_vfiprintf_r+0x228>)
 800494e:	a904      	add	r1, sp, #16
 8004950:	4630      	mov	r0, r6
 8004952:	f3af 8000 	nop.w
 8004956:	4607      	mov	r7, r0
 8004958:	1c78      	adds	r0, r7, #1
 800495a:	d1d6      	bne.n	800490a <_vfiprintf_r+0x19a>
 800495c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800495e:	07d9      	lsls	r1, r3, #31
 8004960:	d405      	bmi.n	800496e <_vfiprintf_r+0x1fe>
 8004962:	89ab      	ldrh	r3, [r5, #12]
 8004964:	059a      	lsls	r2, r3, #22
 8004966:	d402      	bmi.n	800496e <_vfiprintf_r+0x1fe>
 8004968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800496a:	f7ff f9a7 	bl	8003cbc <__retarget_lock_release_recursive>
 800496e:	89ab      	ldrh	r3, [r5, #12]
 8004970:	065b      	lsls	r3, r3, #25
 8004972:	f53f af1f 	bmi.w	80047b4 <_vfiprintf_r+0x44>
 8004976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004978:	e71e      	b.n	80047b8 <_vfiprintf_r+0x48>
 800497a:	ab03      	add	r3, sp, #12
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	462a      	mov	r2, r5
 8004980:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <_vfiprintf_r+0x228>)
 8004982:	a904      	add	r1, sp, #16
 8004984:	4630      	mov	r0, r6
 8004986:	f7ff fc7f 	bl	8004288 <_printf_i>
 800498a:	e7e4      	b.n	8004956 <_vfiprintf_r+0x1e6>
 800498c:	08004d5f 	.word	0x08004d5f
 8004990:	08004d69 	.word	0x08004d69
 8004994:	00000000 	.word	0x00000000
 8004998:	0800474d 	.word	0x0800474d
 800499c:	08004d65 	.word	0x08004d65

080049a0 <__swbuf_r>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	460e      	mov	r6, r1
 80049a4:	4614      	mov	r4, r2
 80049a6:	4605      	mov	r5, r0
 80049a8:	b118      	cbz	r0, 80049b2 <__swbuf_r+0x12>
 80049aa:	6a03      	ldr	r3, [r0, #32]
 80049ac:	b90b      	cbnz	r3, 80049b2 <__swbuf_r+0x12>
 80049ae:	f7ff f871 	bl	8003a94 <__sinit>
 80049b2:	69a3      	ldr	r3, [r4, #24]
 80049b4:	60a3      	str	r3, [r4, #8]
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	071a      	lsls	r2, r3, #28
 80049ba:	d501      	bpl.n	80049c0 <__swbuf_r+0x20>
 80049bc:	6923      	ldr	r3, [r4, #16]
 80049be:	b943      	cbnz	r3, 80049d2 <__swbuf_r+0x32>
 80049c0:	4621      	mov	r1, r4
 80049c2:	4628      	mov	r0, r5
 80049c4:	f000 f82a 	bl	8004a1c <__swsetup_r>
 80049c8:	b118      	cbz	r0, 80049d2 <__swbuf_r+0x32>
 80049ca:	f04f 37ff 	mov.w	r7, #4294967295
 80049ce:	4638      	mov	r0, r7
 80049d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	6922      	ldr	r2, [r4, #16]
 80049d6:	1a98      	subs	r0, r3, r2
 80049d8:	6963      	ldr	r3, [r4, #20]
 80049da:	b2f6      	uxtb	r6, r6
 80049dc:	4283      	cmp	r3, r0
 80049de:	4637      	mov	r7, r6
 80049e0:	dc05      	bgt.n	80049ee <__swbuf_r+0x4e>
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f7ff fdf3 	bl	80045d0 <_fflush_r>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d1ed      	bne.n	80049ca <__swbuf_r+0x2a>
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	6022      	str	r2, [r4, #0]
 80049fa:	701e      	strb	r6, [r3, #0]
 80049fc:	6962      	ldr	r2, [r4, #20]
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d004      	beq.n	8004a0e <__swbuf_r+0x6e>
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	07db      	lsls	r3, r3, #31
 8004a08:	d5e1      	bpl.n	80049ce <__swbuf_r+0x2e>
 8004a0a:	2e0a      	cmp	r6, #10
 8004a0c:	d1df      	bne.n	80049ce <__swbuf_r+0x2e>
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7ff fddd 	bl	80045d0 <_fflush_r>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d0d9      	beq.n	80049ce <__swbuf_r+0x2e>
 8004a1a:	e7d6      	b.n	80049ca <__swbuf_r+0x2a>

08004a1c <__swsetup_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4b29      	ldr	r3, [pc, #164]	@ (8004ac4 <__swsetup_r+0xa8>)
 8004a20:	4605      	mov	r5, r0
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	460c      	mov	r4, r1
 8004a26:	b118      	cbz	r0, 8004a30 <__swsetup_r+0x14>
 8004a28:	6a03      	ldr	r3, [r0, #32]
 8004a2a:	b90b      	cbnz	r3, 8004a30 <__swsetup_r+0x14>
 8004a2c:	f7ff f832 	bl	8003a94 <__sinit>
 8004a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a34:	0719      	lsls	r1, r3, #28
 8004a36:	d422      	bmi.n	8004a7e <__swsetup_r+0x62>
 8004a38:	06da      	lsls	r2, r3, #27
 8004a3a:	d407      	bmi.n	8004a4c <__swsetup_r+0x30>
 8004a3c:	2209      	movs	r2, #9
 8004a3e:	602a      	str	r2, [r5, #0]
 8004a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4a:	e033      	b.n	8004ab4 <__swsetup_r+0x98>
 8004a4c:	0758      	lsls	r0, r3, #29
 8004a4e:	d512      	bpl.n	8004a76 <__swsetup_r+0x5a>
 8004a50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a52:	b141      	cbz	r1, 8004a66 <__swsetup_r+0x4a>
 8004a54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a58:	4299      	cmp	r1, r3
 8004a5a:	d002      	beq.n	8004a62 <__swsetup_r+0x46>
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f7ff f94d 	bl	8003cfc <_free_r>
 8004a62:	2300      	movs	r3, #0
 8004a64:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a6c:	81a3      	strh	r3, [r4, #12]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	6063      	str	r3, [r4, #4]
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	f043 0308 	orr.w	r3, r3, #8
 8004a7c:	81a3      	strh	r3, [r4, #12]
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	b94b      	cbnz	r3, 8004a96 <__swsetup_r+0x7a>
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a8c:	d003      	beq.n	8004a96 <__swsetup_r+0x7a>
 8004a8e:	4621      	mov	r1, r4
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f88b 	bl	8004bac <__smakebuf_r>
 8004a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a9a:	f013 0201 	ands.w	r2, r3, #1
 8004a9e:	d00a      	beq.n	8004ab6 <__swsetup_r+0x9a>
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	60a2      	str	r2, [r4, #8]
 8004aa4:	6962      	ldr	r2, [r4, #20]
 8004aa6:	4252      	negs	r2, r2
 8004aa8:	61a2      	str	r2, [r4, #24]
 8004aaa:	6922      	ldr	r2, [r4, #16]
 8004aac:	b942      	cbnz	r2, 8004ac0 <__swsetup_r+0xa4>
 8004aae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ab2:	d1c5      	bne.n	8004a40 <__swsetup_r+0x24>
 8004ab4:	bd38      	pop	{r3, r4, r5, pc}
 8004ab6:	0799      	lsls	r1, r3, #30
 8004ab8:	bf58      	it	pl
 8004aba:	6962      	ldrpl	r2, [r4, #20]
 8004abc:	60a2      	str	r2, [r4, #8]
 8004abe:	e7f4      	b.n	8004aaa <__swsetup_r+0x8e>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e7f7      	b.n	8004ab4 <__swsetup_r+0x98>
 8004ac4:	20000018 	.word	0x20000018

08004ac8 <_raise_r>:
 8004ac8:	291f      	cmp	r1, #31
 8004aca:	b538      	push	{r3, r4, r5, lr}
 8004acc:	4605      	mov	r5, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	d904      	bls.n	8004adc <_raise_r+0x14>
 8004ad2:	2316      	movs	r3, #22
 8004ad4:	6003      	str	r3, [r0, #0]
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004ade:	b112      	cbz	r2, 8004ae6 <_raise_r+0x1e>
 8004ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ae4:	b94b      	cbnz	r3, 8004afa <_raise_r+0x32>
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f830 	bl	8004b4c <_getpid_r>
 8004aec:	4622      	mov	r2, r4
 8004aee:	4601      	mov	r1, r0
 8004af0:	4628      	mov	r0, r5
 8004af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004af6:	f000 b817 	b.w	8004b28 <_kill_r>
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d00a      	beq.n	8004b14 <_raise_r+0x4c>
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	d103      	bne.n	8004b0a <_raise_r+0x42>
 8004b02:	2316      	movs	r3, #22
 8004b04:	6003      	str	r3, [r0, #0]
 8004b06:	2001      	movs	r0, #1
 8004b08:	e7e7      	b.n	8004ada <_raise_r+0x12>
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004b10:	4620      	mov	r0, r4
 8004b12:	4798      	blx	r3
 8004b14:	2000      	movs	r0, #0
 8004b16:	e7e0      	b.n	8004ada <_raise_r+0x12>

08004b18 <raise>:
 8004b18:	4b02      	ldr	r3, [pc, #8]	@ (8004b24 <raise+0xc>)
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	f7ff bfd3 	b.w	8004ac8 <_raise_r>
 8004b22:	bf00      	nop
 8004b24:	20000018 	.word	0x20000018

08004b28 <_kill_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d07      	ldr	r5, [pc, #28]	@ (8004b48 <_kill_r+0x20>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	f7fc f93b 	bl	8000db0 <_kill>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d102      	bne.n	8004b44 <_kill_r+0x1c>
 8004b3e:	682b      	ldr	r3, [r5, #0]
 8004b40:	b103      	cbz	r3, 8004b44 <_kill_r+0x1c>
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	bd38      	pop	{r3, r4, r5, pc}
 8004b46:	bf00      	nop
 8004b48:	200002cc 	.word	0x200002cc

08004b4c <_getpid_r>:
 8004b4c:	f7fc b928 	b.w	8000da0 <_getpid>

08004b50 <_malloc_usable_size_r>:
 8004b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b54:	1f18      	subs	r0, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bfbc      	itt	lt
 8004b5a:	580b      	ldrlt	r3, [r1, r0]
 8004b5c:	18c0      	addlt	r0, r0, r3
 8004b5e:	4770      	bx	lr

08004b60 <__swhatbuf_r>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	460c      	mov	r4, r1
 8004b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	b096      	sub	sp, #88	@ 0x58
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	461e      	mov	r6, r3
 8004b70:	da0d      	bge.n	8004b8e <__swhatbuf_r+0x2e>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	bf14      	ite	ne
 8004b7e:	2340      	movne	r3, #64	@ 0x40
 8004b80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b84:	2000      	movs	r0, #0
 8004b86:	6031      	str	r1, [r6, #0]
 8004b88:	602b      	str	r3, [r5, #0]
 8004b8a:	b016      	add	sp, #88	@ 0x58
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}
 8004b8e:	466a      	mov	r2, sp
 8004b90:	f000 f848 	bl	8004c24 <_fstat_r>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	dbec      	blt.n	8004b72 <__swhatbuf_r+0x12>
 8004b98:	9901      	ldr	r1, [sp, #4]
 8004b9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ba2:	4259      	negs	r1, r3
 8004ba4:	4159      	adcs	r1, r3
 8004ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004baa:	e7eb      	b.n	8004b84 <__swhatbuf_r+0x24>

08004bac <__smakebuf_r>:
 8004bac:	898b      	ldrh	r3, [r1, #12]
 8004bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bb0:	079d      	lsls	r5, r3, #30
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	d507      	bpl.n	8004bc8 <__smakebuf_r+0x1c>
 8004bb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	6123      	str	r3, [r4, #16]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	6163      	str	r3, [r4, #20]
 8004bc4:	b003      	add	sp, #12
 8004bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc8:	ab01      	add	r3, sp, #4
 8004bca:	466a      	mov	r2, sp
 8004bcc:	f7ff ffc8 	bl	8004b60 <__swhatbuf_r>
 8004bd0:	9f00      	ldr	r7, [sp, #0]
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f7ff f904 	bl	8003de4 <_malloc_r>
 8004bdc:	b948      	cbnz	r0, 8004bf2 <__smakebuf_r+0x46>
 8004bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be2:	059a      	lsls	r2, r3, #22
 8004be4:	d4ee      	bmi.n	8004bc4 <__smakebuf_r+0x18>
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	f043 0302 	orr.w	r3, r3, #2
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	e7e2      	b.n	8004bb8 <__smakebuf_r+0xc>
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	6020      	str	r0, [r4, #0]
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	9b01      	ldr	r3, [sp, #4]
 8004bfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c02:	b15b      	cbz	r3, 8004c1c <__smakebuf_r+0x70>
 8004c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 f81d 	bl	8004c48 <_isatty_r>
 8004c0e:	b128      	cbz	r0, 8004c1c <__smakebuf_r+0x70>
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	431d      	orrs	r5, r3
 8004c20:	81a5      	strh	r5, [r4, #12]
 8004c22:	e7cf      	b.n	8004bc4 <__smakebuf_r+0x18>

08004c24 <_fstat_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4d07      	ldr	r5, [pc, #28]	@ (8004c44 <_fstat_r+0x20>)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	f7fc f91d 	bl	8000e70 <_fstat>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	d102      	bne.n	8004c40 <_fstat_r+0x1c>
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	b103      	cbz	r3, 8004c40 <_fstat_r+0x1c>
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	bd38      	pop	{r3, r4, r5, pc}
 8004c42:	bf00      	nop
 8004c44:	200002cc 	.word	0x200002cc

08004c48 <_isatty_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d06      	ldr	r5, [pc, #24]	@ (8004c64 <_isatty_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fc f91c 	bl	8000e90 <_isatty>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_isatty_r+0x1a>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_isatty_r+0x1a>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200002cc 	.word	0x200002cc

08004c68 <_init>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr

08004c74 <_fini>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr
